// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PLANNING_DATABASE_URL")
}

model Plan {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  version   Int      @default(1)
  status    String   // draft, generating, completed, failed
  
  // Plan metadata
  name      String?
  description String?
  startDate DateTime?
  endDate   DateTime?
  
  // Plan content (JSON for flexibility)
  content   Json?    // structured plan data
  
  // Relations
  microcycles Microcycle[]
  
  @@map("plans")
}

model Microcycle {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  // Microcycle metadata
  weekNumber Int
  name      String?
  phase     String? // preparation, competition, recovery
  
  // Relations
  sessions  Session[]
  
  @@map("microcycles")
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  microcycleId String
  microcycle   Microcycle @relation(fields: [microcycleId], references: [id], onDelete: Cascade)
  
  // Session metadata
  dayOfWeek Int      // 1-7 (Monday-Sunday)
  name      String?
  duration  Int?     // minutes
  
  // Relations
  exercises Exercise[]
  
  @@map("sessions")
}

model Exercise {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // Exercise data
  name      String
  category  String? // strength, conditioning, mobility
  sets      Int?
  reps      String? // "8-12" or "30s"
  weight    String? // "bodyweight" or "80% 1RM"
  notes     String?
  order     Int     @default(0)
  
  @@map("exercises")
}

model PlanJob {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Job identification
  jobId     String   @unique
  userId    String
  
  // Job status tracking
  status    String   @default("pending") // pending, processing, completed, failed
  progress  Int      @default(0) // 0-100 percentage
  
  // Request data
  requestData Json   // PlanGenerationRequest data
  
  // Result data
  resultData  Json?  // Generated plan data when completed
  errorData   Json?  // Error information when failed
  
  // Timing
  startedAt   DateTime?
  completedAt DateTime?
  
  // Retry tracking
  retryCount  Int     @default(0)
  maxRetries  Int     @default(3)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("plan_jobs")
}

// RPE反馈表
model RPEFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联信息
  sessionId String
  exerciseId String
  
  // RPE数据
  rpe            Int     // 1-10 RPE评分
  completionRate Int     // 0-100 完成率百分比
  notes          String? // 用户备注
  
  // 时间戳
  timestamp      DateTime @default(now())
  
  // 索引
  @@index([sessionId])
  @@index([exerciseId])
  @@index([timestamp])
  @@map("rpe_feedback")
}

// 性能指标表
model PerformanceMetrics {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联信息
  sessionId String
  
  // 性能数据
  totalVolume    Float   // 总训练量
  averageRPE     Float   // 平均RPE (1-10)
  completionRate Int     // 完成率 (0-100)
  recoveryTime   Float   // 恢复时间 (小时)
  sleepQuality   Int     // 睡眠质量 (1-10)
  stressLevel    Int     // 压力水平 (1-10)
  
  // 时间戳
  timestamp      DateTime @default(now())
  
  // 索引
  @@index([sessionId])
  @@index([timestamp])
  @@map("performance_metrics")
}

// 适应性调整记录表
model AdaptationRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联信息
  planId    String
  sessionId String?
  
  // 调整信息
  type        String  // recovery, intensity_reduction, volume_reduction, etc.
  changes     Json    // 具体调整内容
  rationale   String  // 调整原因
  confidence  Float   // 置信度 (0-1)
  
  // 实施信息
  implemented Boolean @default(false)
  appliedAt   DateTime?
  
  // 索引
  @@index([planId])
  @@index([sessionId])
  @@index([type])
  @@index([createdAt])
  @@map("adaptation_records")
}





