// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("WORKOUTS_DATABASE_URL")
}

model WorkoutSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String
  planId      String? // Reference to training plan
  sessionName String?

  // Session timing
  startedAt     DateTime?
  completedAt   DateTime?
  pausedAt      DateTime?
  totalDuration Int? // Total duration in minutes

  // Session status
  status   String  @default("draft") // draft, active, paused, completed, cancelled
  isActive Boolean @default(false)

  // Session data
  notes         String?
  overallRating Int? // 1-5 scale
  difficulty    Int? // 1-5 scale
  energy        Int? // 1-5 scale
  motivation    Int? // 1-5 scale

  // Environmental factors
  location    String?
  weather     String?
  temperature Float?

  // Relations
  records   WorkoutRecord[]
  exercises WorkoutExercise[]

  @@map("workout_sessions")
}

model UserSummary {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  weekStart DateTime
  weekEnd   DateTime

  // 训练数据
  totalWorkouts          Int
  completedWorkouts      Int
  totalVolume            Float
  averageSessionDuration Int

  // 疲劳数据
  averageFatigueLevel    Float
  fatigueAssessmentCount Int

  // 个人记录
  personalRecordsSet Int
  newPersonalRecords String[] // JSON array of new PRs

  // 进度指标
  weeklyGoalCompletion Int
  consistencyScore     Int

  // 元数据
  lastUpdated DateTime
  dataVersion Int      @default(1)

  @@unique([userId, weekStart])
  @@map("user_summaries")
}

model WorkoutExercise {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionId String
  session   WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Exercise details
  exerciseId   String? // Reference to exercises service
  exerciseName String
  category     String
  order        Int // Order in the session

  // Target values (from plan)
  targetSets     Int
  targetReps     Int
  targetWeight   Float?
  targetDuration Int? // For time-based exercises
  targetRest     Int? // Rest between sets in seconds

  // Actual values (recorded during workout)
  actualSets     Int    @default(0)
  actualReps     Int    @default(0)
  actualWeight   Float?
  actualDuration Int?
  actualRest     Int?

  // Performance metrics
  totalVolume Float? // totalWeight * totalReps
  averageRPE  Float? // Rate of Perceived Exertion (1-10)
  maxRPE      Int? // Maximum RPE in any set
  minRPE      Int? // Minimum RPE in any set

  // Status
  isCompleted Boolean   @default(false)
  completedAt DateTime?

  // Notes
  notes String?

  // Relations
  records WorkoutRecord[]

  @@map("workout_exercises")
}

model WorkoutRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionId  String
  session    WorkoutSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   WorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  // Set details
  setNumber      Int
  targetReps     Int
  actualReps     Int
  targetWeight   Float?
  actualWeight   Float?
  targetDuration Int?
  actualDuration Int?

  // Performance data
  restTime   Int? // Rest time before this set (seconds)
  rpe        Int? // Rate of Perceived Exertion (1-10)
  form       Int? // Form quality (1-5)
  difficulty Int? // Set difficulty (1-5)

  // Timing
  startedAt   DateTime?
  completedAt DateTime?

  // Status
  isCompleted Boolean @default(false)

  // Notes
  notes String?

  @@map("workout_records")
}

model PersonalRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  exerciseId   String? // Reference to exercises service
  exerciseName String

  // Record details
  recordType String // "max_weight", "max_reps", "max_volume", "max_duration"
  value      Float // The actual record value
  unit       String // "kg", "lbs", "reps", "minutes", "seconds"

  // Context
  sessionId String? // Reference to the session where record was set
  setNumber Int? // Which set the record was set in
  notes     String?

  // Verification
  isVerified Boolean   @default(false)
  verifiedAt DateTime?

  @@unique([userId, exerciseId, recordType])
  @@map("personal_records")
}

model WorkoutTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String
  name        String
  description String?

  // Template data
  exercises Json // Array of exercise configurations

  // Metadata
  isPublic   Boolean  @default(false)
  tags       String[] // Array of tags for categorization
  difficulty Int? // 1-5 scale

  // Usage stats
  useCount Int       @default(0)
  lastUsed DateTime?

  @@map("workout_templates")
}

model WorkoutGoal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  exerciseId   String? // Reference to exercises service
  exerciseName String

  // Goal details
  goalType     String // "weight", "reps", "volume", "frequency", "consistency"
  targetValue  Float
  currentValue Float  @default(0)
  unit         String // "kg", "lbs", "reps", "sessions", "days"

  // Timeline
  startDate  DateTime
  targetDate DateTime
  isAchieved Boolean   @default(false)
  achievedAt DateTime?

  // Progress tracking
  progress   Float @default(0) // 0-100 percentage
  milestones Json? // Array of milestone objects

  @@map("workout_goals")
}
