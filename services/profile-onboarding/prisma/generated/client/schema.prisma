// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PROFILE_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Onboarding data - Step 1: Training Purpose
  purpose        String? // general_fitness, sport_performance, muscle_building, weight_loss, rehabilitation
  purposeDetails String? // Additional details about their specific goals

  // Step 2: Proficiency Level
  proficiency String? // beginner, intermediate, advanced

  // Step 3: Season and Goals
  season          String? // offseason, preseason, inseason
  competitionDate DateTime? // When their main competition/event is

  // Step 4: Availability
  availabilityDays Int? // How many days per week they can train
  weeklyGoalDays   Int? @default(3) // User preferred weekly training goal days

  // Step 5: Equipment and scheduling
  equipment      String[] // array of equipment names
  fixedSchedules Json? // array of {day, start, end} objects

  // Step 6: Recovery habits (optional)
  recoveryHabits String[] // array of recovery practices they use

  // Onboarding status
  onboardingStep       Int     @default(1) // Track which step they're on
  isOnboardingComplete Boolean @default(false)

  // Relations
  profiles Profile[]

  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Profile specific data
  name   String?
  age    Int?
  weight Float?
  height Float?

  @@map("profiles")
}
