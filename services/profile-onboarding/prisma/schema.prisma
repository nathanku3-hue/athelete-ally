// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PROFILE_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Onboarding data - Step 1: Training Purpose
  purpose         String? @map("purpose") // general_fitness, sport_performance, muscle_building, weight_loss, rehabilitation
  purposeDetails  String? @map("purpose_details") // Additional details about their specific goals
  
  // Step 2: Proficiency Level
  proficiency     String? @map("proficiency") // beginner, intermediate, advanced
  
  // Step 3: Season and Goals
  season          String? @map("season") // offseason, preseason, inseason
  competitionDate DateTime? @map("competition_date") // When their main competition/event is
  
  // Step 4: Availability
  availabilityDays Int? @map("availability_days") // How many days per week they can train
  weeklyGoalDays  Int? @map("weekly_goal_days") @default(3) // User preferred weekly training goal days
  
  // Step 5: Equipment and scheduling
  equipment       String[] @map("equipment") // array of equipment names
  fixedSchedules  Json? @map("fixed_schedules") // array of {day, start, end} objects
  
  // Step 6: Recovery habits (optional)
  recoveryHabits  String[] @map("recovery_habits") // array of recovery practices they use
  
  // Onboarding status
  onboardingStep  Int @map("onboarding_step") @default(1) // Track which step they're on
  isOnboardingComplete Boolean @map("is_onboarding_complete") @default(false)
  
  // Relations
  profiles Profile[]
  
  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Profile specific data
  name      String?
  age       Int?
  weight    Float?
  height    Float?
  
  @@map("profiles")
}
