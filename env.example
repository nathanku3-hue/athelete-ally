# ===========================================
# Athlete Ally - 环境变量配置模板
# ===========================================
# 
# 重要说明：
# 1. 复制此文件为 .env
# 2. 填入从安全渠道获得的实际凭证
# 3. 永远不要将 .env 文件提交到版本控制
# 4. 定期轮换凭证以确保安全
#
# 生成时间: $(date)
# 版本: 2.0 (大重启协议后)
# ===========================================

# ===========================================
# 基础环境配置
# ===========================================
NODE_ENV=development
PORT=8001

# ===========================================
# 数据库配置
# ===========================================
# 主数据库
DATABASE_URL=postgresql://athlete_ally_user:YOUR_DB_PASSWORD@postgres:5432/athlete_ally_main

# 配置文件数据库
CONFIG_DATABASE_URL=postgresql://athlete_ally_user:YOUR_DB_PASSWORD@postgres:5432/athlete_ally_config

# 用户档案数据库
PROFILE_DATABASE_URL=postgresql://athlete_ally_user:YOUR_DB_PASSWORD@postgres:5432/athlete_ally_profiles

# 训练计划数据库
PLAN_DATABASE_URL=postgresql://athlete_ally_user:YOUR_DB_PASSWORD@postgres:5432/athlete_ally_plans

# 疲劳管理数据库
FATIGUE_DATABASE_URL=postgresql://athlete_ally_user:YOUR_DB_PASSWORD@postgres:5432/athlete_ally_fatigue

# 通知服务数据库
NOTIFICATION_DATABASE_URL=postgresql://athlete_ally_user:YOUR_DB_PASSWORD@postgres:5432/athlete_ally_notifications

# ===========================================
# Redis 配置
# ===========================================
REDIS_URL=redis://athlete_ally_redis:YOUR_REDIS_PASSWORD@redis:6379/0

# ===========================================
# NATS 消息队列配置
# ===========================================
NATS_URL=nats://localhost:4223

# Stream Mode Configuration
# - single: Use legacy ATHLETE_ALLY_EVENTS stream (backward compatibility)
# - multi: Use modern multi-stream topology (AA_CORE_HOT, AA_VENDOR_HOT, AA_DLQ)
EVENT_STREAM_MODE=single

# Stream Management Flags
# - true: Services manage their own streams and consumers (development)
# - false: External management of streams/consumers (production/CI)
FEATURE_SERVICE_MANAGES_STREAMS=true
FEATURE_SERVICE_MANAGES_CONSUMERS=true

# Optional: Disable stream mode logging
# LOG_MODE=false

# ===========================================
# 安全密钥配置
# ===========================================
# JWT 密钥 (用于用户认证)
JWT_SECRET=YOUR_JWT_SECRET

# API 网关密钥
API_GATEWAY_KEY=YOUR_API_GATEWAY_KEY

# 服务间通信密钥
SERVICE_COMMUNICATION_KEY=YOUR_SERVICE_COMMUNICATION_KEY

# ===========================================
# 第三方服务配置
# ===========================================
# OpenAI API (用于AI功能)
OPENAI_API_KEY=YOUR_OPENAI_API_KEY

# 监控服务
MONITORING_KEY=YOUR_MONITORING_KEY

# 日志服务
LOGGING_KEY=YOUR_LOGGING_KEY

# ===========================================
# Docker端口配置 (本地开发)
# ===========================================
# Redis端口 (默认: 6379)
REDIS_PORT=6379

# PostgreSQL端口 (默认: 5432)
POSTGRES_PORT=5432

# NATS端口 (默认: 4222 - container internal port, exposed as 4223 on host)
NATS_PORT=4222

# 端口冲突时使用替代端口
# POSTGRES_PORT=5433
# REDIS_PORT=6380
# NATS_PORT=4223

# ===========================================
# 使用方法
# ===========================================
# 1. 复制此文件为 .env.local (不提交到版本控制)
# 2. 修改端口配置
# 3. 运行: npm run infra:up

# ===========================================
# CI环境说明
# ===========================================
# CI环境使用docker-compose.ci-standalone.yml
# 自动移除主机端口绑定，服务仅通过内部网络通信
# 使用唯一项目名称确保环境隔离
# 
# 环境要求:
# - Node.js 20.18.0 LTS
# - npm 10.9.3
# - Docker & Docker Compose
# 
# 重要: 不要提交 .env* 文件到版本控制

# ===========================================
# 服务端口配置
# ===========================================
# 网关 BFF
GATEWAY_BFF_PORT=8001

# 用户档案服务
PROFILE_SERVICE_PORT=8002

# 训练计划服务
PLAN_SERVICE_PORT=8003

# 疲劳管理服务
FATIGUE_SERVICE_PORT=8004

# 通知服务
NOTIFICATION_SERVICE_PORT=8005

# 规划引擎
PLANNING_ENGINE_PORT=8006

# 自适应引擎
ADAPTIVE_ENGINE_PORT=8007

# 分析服务
ANALYTICS_SERVICE_PORT=8008

# 作业调度器
JOB_SCHEDULER_PORT=8009

# 锻炼服务
EXERCISE_SERVICE_PORT=8010

# ===========================================
# 服务URL配置
# ===========================================
# 规划引擎URL
PLANNING_ENGINE_URL=http://planning-engine:8006

# 自适应引擎URL
ADAPTIVE_ENGINE_URL=http://adaptive-engine:8007

# 分析服务URL
ANALYTICS_SERVICE_URL=http://analytics:8008

# 作业调度器URL
JOB_SCHEDULER_URL=http://job-scheduler:8009

# 锻炼服务URL
EXERCISE_SERVICE_URL=http://exercises:8010

# ===========================================
# 开发工具配置
# ===========================================
# 调试模式
DEBUG_MODE=false

# 日志级别
LOG_LEVEL=info

# 性能监控
ENABLE_METRICS=true

# ===========================================
# 安全配置
# ===========================================
# CORS 配置
CORS_ORIGIN=http://localhost:3000

# 会话密钥
SESSION_SECRET=YOUR_SESSION_SECRET

# 加密密钥
ENCRYPTION_KEY=YOUR_ENCRYPTION_KEY

# ===========================================
# 生产环境配置
# ===========================================
# 生产环境数据库
# PRODUCTION_DATABASE_URL=postgresql://prod_user:PROD_PASSWORD@prod-db:5432/athlete_ally_prod

# 生产环境Redis
# PRODUCTION_REDIS_URL=redis://prod_redis:PROD_REDIS_PASSWORD@prod-redis:6379/0

# ===========================================
# 凭证轮换提醒
# ===========================================
# 下次轮换日期: $(date -d "+30 days")
# 轮换负责人: 工程师 C (安全运维与依赖负责人)
# 紧急联系: 通过团队Slack/Teams

# Vendor Webhooks (Oura)
OURA_WEBHOOK_SECRET=
OURA_IDEMPOTENCY_TTL_SECONDS=600

# Normalize Service (Durable Consumer / DLQ)
NORMALIZE_DURABLE_NAME=normalize-oura
NORMALIZE_OURA_MAX_DELIVER=5
NORMALIZE_DLQ_SUBJECT=dlq.vendor.oura.webhook
NORMALIZE_OURA_ACK_WAIT_MS=15000
NORMALIZE_OURA_BACKOFF_MS=250,1000,5000

# Oura OAuth (feature-flagged)
# Enable the OAuth linking flow: GET /auth/oura/link, /auth/oura/callback, POST /auth/oura/refresh
OURA_OAUTH_ENABLED=false
OURA_CLIENT_ID=
OURA_CLIENT_SECRET=
OURA_REDIRECT_URI=http://localhost:4101/auth/oura/callback
OURA_SCOPE=personal,heartrate,heartrate_daily,workout,activity,tag,userbasic,offline_access

# Token encryption key (base64 of 32 bytes) used to protect tokens at rest
TOKEN_ENCRYPTION_KEY=

# Optional: use Postgres for token storage (default: memory)
# OURA_TOKEN_STORE=postgres
# DATABASE_URL=postgresql://athlete:athlete@localhost:55432/athlete_ingest
