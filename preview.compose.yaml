services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./src:/app/src
      - ./packages:/app/packages
      - ./public:/app/public
      - ./next.config.mjs:/app/next.config.mjs
      - ./tailwind.config.mjs:/app/tailwind.config.mjs
      - ./postcss.config.mjs:/app/postcss.config.mjs
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./package.json:/app/package.json
      # But, protect the container's node_modules from being overwritten
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    depends_on:
      - gateway-bff
      - planning-engine
      - profile-onboarding
  gateway-bff:
    build:
      context: ./apps/gateway-bff
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./apps/gateway-bff:/usr/src/app
      # But, protect the container's node_modules from being overwritten
      - /usr/src/app/node_modules
    env_file:
      - ./.env
    ports:
      - "${GATEWAY_BFF_PORT}:${GATEWAY_BFF_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${GATEWAY_BFF_PORT}
      - PROFILE_ONBOARDING_URL=${PROFILE_ONBOARDING_URL}
      - PLANNING_ENGINE_URL=${PLANNING_ENGINE_URL}
  planning-engine:
    build:
      context: ./services/planning-engine
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./services/planning-engine:/usr/src/app
      # But, protect the container's node_modules from being overwritten
      - /usr/src/app/node_modules
    env_file:
      - ./.env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PLANNING_ENGINE_PORT}
      - PLANNING_DATABASE_URL=${PLANNING_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NATS_URL=${NATS_URL}
    ports:
      - "${PLANNING_ENGINE_PORT}:${PLANNING_ENGINE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  profile-onboarding:
    build:
      context: ./services/profile-onboarding
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./services/profile-onboarding:/usr/src/app
      # But, protect the container's node_modules from being overwritten
      - /usr/src/app/node_modules
    env_file:
      - ./.env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PROFILE_ONBOARDING_PORT}
      - PROFILE_DATABASE_URL=${PROFILE_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NATS_URL=${NATS_URL}
    ports:
      - "${PROFILE_ONBOARDING_PORT}:${PROFILE_ONBOARDING_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  redis:
    image: redis:7-alpine
    env_file:
      - ./.env
    ports:
      - "${REDIS_PORT}:6379"
  postgres:
    image: postgres:16-alpine
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U athlete -d athlete"]
      interval: 5s
      timeout: 5s
      retries: 5
  nats:
    image: nats:2.10-alpine
    command: ["-js", "-m", "8222"]
    env_file:
      - ./.env
    ports:
      - "${NATS_PORT}:4222"
      - "8222:8222"
  prometheus:
    image: prom/prometheus:latest
    env_file:
      - ./.env
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
  grafana:
    image: grafana/grafana:latest
    env_file:
      - ./.env
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  jaeger:
    image: jaegertracing/all-in-one:latest
    env_file:
      - ./.env
    ports:
      - "${JAEGER_PORT}:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true


