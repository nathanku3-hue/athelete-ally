{
  "__inputs": [
    {
      "name": "DS_PROMETHEUS",
      "label": "Prometheus",
      "description": "Prometheus datasource",
      "type": "datasource",
      "pluginId": "prometheus",
      "pluginName": "Prometheus"
    }
  ],
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.0.0"
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": "9.0.0"
    },
    {
      "type": "datasource",
      "id": "prometheus",
      "name": "Prometheus",
      "version": "2.0.0"
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": "9.0.0"
    }
  ],
  "uid": "aa-sleep-norm",
  "title": "Sleep Normalize Pipeline",
  "timezone": "",
  "version": 1,
  "schemaVersion": 37,
  "editable": true,
  "refresh": "30s",
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "templating": {
    "list": [
      {
        "name": "DS_PROMETHEUS",
        "type": "datasource",
        "query": "prometheus",
        "description": "Prometheus datasource"
      },
      {
        "name": "job",
        "type": "query",
        "datasource": "${DS_PROMETHEUS}",
        "query": "label_values(normalize_sleep_messages_total, job)",
        "current": {
          "selected": true,
          "text": "normalize",
          "value": "normalize"
        },
        "refresh": 1,
        "label": "job"
      },
      {
        "name": "stream",
        "type": "custom",
        "query": "AA_CORE_HOT,ATHLETE_ALLY_EVENTS",
        "current": {
          "selected": true,
          "text": "AA_CORE_HOT",
          "value": "AA_CORE_HOT"
        },
        "label": "stream"
      },
      {
        "name": "durable",
        "type": "custom",
        "query": "normalize-sleep-durable",
        "current": {
          "selected": true,
          "text": "normalize-sleep-durable",
          "value": "normalize-sleep-durable"
        },
        "label": "durable"
      },
      {
        "type": "custom",
        "name": "subject",
        "label": "subject",
        "query": "athlete-ally.sleep.raw-received,athlete-ally.sleep.normalized-stored",
        "current": {
          "selected": true,
          "value": "athlete-ally.sleep.raw-received",
          "text": "athlete-ally.sleep.raw-received"
        }
      }
    ]
  },
  "panels": [
    {
      "type": "text",
      "title": "Sleep Pipeline Help",
      "mode": "markdown",
      "gridPos": {
        "w": 24,
        "y": 0,
        "h": 5,
        "x": 0
      },
      "options": {
        "content": "[Runbook](docs/runbook/sleep-troubleshooting.md) | Variables: job, stream, durable, subject.\\nEN: Use variables to scope. If panels show \"No data\", confirm scrape/labels. Steady state: DLQ=0, successes increasing.\\nZH: 變數控制查詢；若顯示「無資料」，檢查 Prometheus 抓取與標籤。穩定態：DLQ=0，success 持續。"
      }
    },
    {
      "type": "timeseries",
      "title": "Sleep Messages by Result (stacked)",
      "description": "EN: normalize_sleep_messages_total by result; filters: subject=athlete-ally.sleep.raw-received, stream=$stream, durable=$durable, job=$job.\nZH: 按結果堆疊顯示訊息計數；篩選條件固定 subject=athlete-ally.sleep.raw-received，並依 stream/durable/job 過濾。",
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_PROMETHEUS}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "drawStyle": "line",
            "lineWidth": 1
          },
          "unit": "short"
        },
        "overrides": []
      },
      "options": {
        "legend": {
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "stacking": {
          "mode": "normal"
        }
      },
      "targets": [
        {
          "expr": "sum by (result) (rate(normalize_sleep_messages_total{subject=\"athlete-ally.sleep.raw-received\",stream=\"$stream\",durable=\"$durable\",job=\"$job\"}[5m]))",
          "legendFormat": "{{result}}",
          "refId": "A"
        }
      ],
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 0
      }
    },
    {
      "type": "timeseries",
      "title": "DLQ Trend",
      "description": "EN: DLQ rate over time (result=dlq).\nZH: DLQ 趨勢（result=dlq）。",
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_PROMETHEUS}"
      },
      "options": {
        "legend": {
          "displayMode": "list"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "targets": [
        {
          "expr": "rate(normalize_sleep_messages_total{result=\"dlq\",subject=\"athlete-ally.sleep.raw-received\",stream=\"$stream\",durable=\"$durable\",job=\"$job\"}[5m])",
          "legendFormat": "dlq",
          "refId": "A"
        }
      ],
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 8
      }
    },
    {
      "type": "timeseries",
      "title": "Processing Duration p95/p99 (consume/publish)",
      "description": "EN: Prefer operation=consume; if not present, shows publish (optional). topic=sleep_raw_received.\nZH: 優先顯示 consume；若無則顯示 publish（可選）。",
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_PROMETHEUS}"
      },
      "options": {
        "legend": {
          "displayMode": "table"
        }
      },
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum by (le) (rate(event_bus_event_processing_duration_seconds_bucket{topic=\"sleep_raw_received\",operation=\"consume\",job=\"$job\"}[5m])))",
          "legendFormat": "p95 consume",
          "refId": "A"
        },
        {
          "expr": "histogram_quantile(0.99, sum by (le) (rate(event_bus_event_processing_duration_seconds_bucket{topic=\"sleep_raw_received\",operation=\"consume\",job=\"$job\"}[5m])))",
          "legendFormat": "p99 consume",
          "refId": "B"
        },
        {
          "expr": "histogram_quantile(0.95, sum by (le) (rate(event_bus_event_processing_duration_seconds_bucket{topic=\"sleep_raw_received\",operation=\"publish\",job=\"$job\"}[5m])))",
          "legendFormat": "p95 publish (opt)",
          "refId": "C"
        },
        {
          "expr": "histogram_quantile(0.99, sum by (le) (rate(event_bus_event_processing_duration_seconds_bucket{topic=\"sleep_raw_received\",operation=\"publish\",job=\"$job\"}[5m])))",
          "legendFormat": "p99 publish (opt)",
          "refId": "D"
        }
      ],
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 8
      }
    },
    {
      "type": "text",
      "title": "Consumer Lag Check (Placeholder)",
      "mode": "markdown",
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "options": {
        "content": "**Lag Check (NATS CLI first, Node JSM fallback)**\n\n- NATS CLI (pending):\n  - `nats consumer info $stream normalize-sleep-durable` (see `Num Pending`)\n- NATS CLI (last DLQ msg):\n  - `nats stream get AA_DLQ --last-by-subject dlq.normalize.sleep.raw-received.schema-invalid`\n- Node (pending, snippet):\n  ```js\n  import { connect } from 'nats';\n  const nc = await connect({ servers: process.env.NATS_URL || 'nats://localhost:4223' });\n  const jsm = await nc.jetstreamManager();\n  const ci = await jsm.consumers.info('$stream', 'normalize-sleep-durable');\n  console.log(ci.num_pending);\n  ```\n- Soak script (JSON): run docs/phase-3/ops/48h-soak-health-check.sh and inspect ./soak_sleep_summary.json"
      }
    }
  ]
}