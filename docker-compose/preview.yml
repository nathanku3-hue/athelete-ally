services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./src:/app/src
      - ./packages:/app/packages
      - ./public:/app/public
      - ./next.config.mjs:/app/next.config.mjs
      - ./tailwind.config.mjs:/app/tailwind.config.mjs
      - ./postcss.config.mjs:/app/postcss.config.mjs
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./package.json:/app/package.json
      # But, protect the container's node_modules from being overwritten
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    depends_on:
      - gateway-bff
      - planning-engine
      - profile-onboarding
  gateway-bff:
    build:
      context: .
      dockerfile: apps/gateway-bff/Dockerfile
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./apps/gateway-bff:/usr/src/app
      # But, protect the container's node_modules from being overwritten
      - /usr/src/app/node_modules
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - PROFILE_ONBOARDING_URL=http://profile-onboarding:4101
      - PLANNING_ENGINE_URL=http://planning-engine:4102
      - EXERCISES_URL=http://exercises:4103
      - FATIGUE_URL=http://fatigue:4104
      - WORKOUTS_URL=http://workouts:4105
      - ANALYTICS_URL=http://analytics:4106
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - CORS_ALLOW_CREDENTIALS=true
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
  planning-engine:
    build:
      context: .
      dockerfile: services/planning-engine/Dockerfile
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./services/planning-engine:/usr/src/app
      # But, protect the container's node_modules from being overwritten
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4102
      - PLANNING_DATABASE_URL=postgresql://athlete:athlete@postgres:5432/athlete_planning
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NATS_URL=nats://nats:4222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
    ports:
      - "4102:4102"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  profile-onboarding:
    build:
      context: .
      dockerfile: services/profile-onboarding/Dockerfile
    # The command for development with hot-reloading
    command: npm run dev
    volumes:
      # Mount your local code for hot-reloading
      - ./services/profile-onboarding:/usr/src/app
      # But, protect the container's node_modules from being overwritten
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4101
      - PROFILE_DATABASE_URL=postgresql://athlete:athlete@postgres:5432/athlete_profile
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
    ports:
      - "4101:4101"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  redis:
    image: redis:7-alpine
    profiles: ["local", "ci"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U athlete -d athlete"]
      interval: 5s
      timeout: 5s
      retries: 5
  nats:
    image: nats:2.10-alpine
    command: ["-js", "-m", "8222"]
    ports:
      - "${NATS_PORT:-4222}:4222"
      - "8222:8222"
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "${JAEGER_PORT:-16686}:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
  exercises:
    build:
      context: .
      dockerfile: services/exercises/Dockerfile
    command: npm run dev
    volumes:
      - ./services/exercises:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4103
      - EXERCISES_DATABASE_URL=postgresql://athlete:athlete@postgres:5432/athlete_exercises
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
    ports:
      - "4103:4103"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  fatigue:
    build:
      context: .
      dockerfile: services/fatigue/Dockerfile
    command: npm run dev
    volumes:
      - ./services/fatigue:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4104
      - FATIGUE_DATABASE_URL=postgresql://athlete:athlete@postgres:5432/athlete_fatigue
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
    ports:
      - "4104:4104"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  workouts:
    build:
      context: .
      dockerfile: services/workouts/Dockerfile
    command: npm run dev
    volumes:
      - ./services/workouts:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4105
      - WORKOUTS_DATABASE_URL=postgresql://athlete:athlete@postgres:5432/athlete_workouts
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
    ports:
      - "4105:4105"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started
  analytics:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile
    command: npm run dev
    volumes:
      - ./services/analytics:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4106
      - ANALYTICS_DATABASE_URL=postgresql://athlete:athlete@postgres:5432/athlete_analytics
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=athlete
      - POSTGRES_PASSWORD=athlete
      - POSTGRES_DB=athlete
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_HOST=nats
      - NATS_PORT=4222
    ports:
      - "4106:4106"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      redis:
        condition: service_started


