// Jest test environment setupimport '@testing-library/jest-dom';// Mock Next.js (pages router) for legacy importsjest.mock('next/router', () => ({  useRouter() {    return {      route: '/',      pathname: '/',      query: {},      asPath: '/',      push: jest.fn(),      pop: jest.fn(),      reload: jest.fn(),      back: jest.fn(),      prefetch: jest.fn().mockResolvedValue(undefined),      beforePopState: jest.fn(),      events: { on: jest.fn(), off: jest.fn(), emit: jest.fn() },      isFallback: false,    };  },}));// Mock Next.js Image and Linkjest.mock('next/image', () => ({  __esModule: true,  default: (props: any) => {    const React = require('react');    return React.createElement('img', props);  },}));jest.mock('next/link', () => ({  __esModule: true,  default: ({ children, href, ...props }: any) => {    const React = require('react');    return React.createElement('a', { href, ...props }, children);  },}));// Mock Next App Router (next/navigation)jest.mock('next/navigation', () => ({  useRouter() {    return {      push: jest.fn(),      replace: jest.fn(),      prefetch: jest.fn(),      back: jest.fn(),      forward: jest.fn(),      refresh: jest.fn(),    };  },  useSearchParams() {    return new (class {      get(name: string) { return null; }      toString() { return ''; }      entries() { return ([] as any).entries(); }      keys() { return ([] as any).keys(); }      values() { return ([] as any).values(); }      [Symbol.iterator]() { return ([] as any)[Symbol.iterator](); }    })();  },}));// Also mock internal path used by Next internalstry {  require.resolve('next/src/client/components/navigation');  jest.mock('next/src/client/components/navigation', () => ({    useRouter() {      return {        push: jest.fn(),        replace: jest.fn(),        prefetch: jest.fn(),        back: jest.fn(),        forward: jest.fn(),        refresh: jest.fn(),      };    },  }));} catch {}// Mock planar hook to avoid QueryClient requirement in a11y testsjest.mock('@/hooks/useGeneratePlan', () => ({  useGeneratePlan: () => ({    mutateAsync: jest.fn().mockResolvedValue({ jobId: 'test_job', status: 'queued' }),    isPending: false,    isError: false,    error: null,  }),}));// Polyfills and globalsif (typeof (global as any).fetch === 'undefined') {  (global as any).fetch = require('node-fetch');}const localStorageMock = {  getItem: jest.fn(),  setItem: jest.fn(),  removeItem: jest.fn(),  clear: jest.fn(),};(global as any).localStorage = localStorageMock as any;const sessionStorageMock = {  getItem: jest.fn(),  setItem: jest.fn(),  removeItem: jest.fn(),  clear: jest.fn(),};(global as any).sessionStorage = sessionStorageMock as any;(global as any).IntersectionObserver = class {  disconnect() {}  observe() {}  unobserve() {}  takeRecords() { return []; }};(global as any).ResizeObserver = class {  disconnect() {}  observe() {}  unobserve() {}};if (typeof window !== 'undefined') {  Object.defineProperty(window, 'matchMedia', {    writable: true,    value: jest.fn().mockImplementation((query: string) => ({      matches: false,      media: query,      onchange: null,      addListener: jest.fn(),      removeListener: jest.fn(),      addEventListener: jest.fn(),      removeEventListener: jest.fn(),      dispatchEvent: jest.fn(),    })),  });  Object.defineProperty(window, 'scrollTo', { value: jest.fn(), writable: true });}// Silence noisy console outputconst originalError = console.error;const originalWarn = console.warn;beforeAll(() => {  console.error = (...args: any[]) => {    const msg = String(args[0] ?? '');    if (      msg.includes('Warning: ReactDOM.render is deprecated') ||      msg.includes('HTMLCanvasElement.prototype.getContext')    ) {      return;    }    originalError.call(console, ...args);  };  console.warn = (...args: any[]) => {    if (typeof args[0] === 'string' && args[0].includes('componentWillReceiveProps has been renamed')) {      return;    }    originalWarn.call(console, ...args);  };});afterAll(() => {  console.error = originalError;  console.warn = originalWarn;});afterEach(() => {  jest.clearAllMocks();  localStorageMock.clear();  sessionStorageMock.clear();});// jsdom canvas shim to avoid axe color-contrast getContext error(() => {  const g: any = globalThis as any;  const Canvas = g.HTMLCanvasElement || (g.window && g.window.HTMLCanvasElement);  if (Canvas && Canvas.prototype) {    try {      Canvas.prototype.getContext = jest.fn(() => ({        measureText: () => ({ width: 0 }),        fillRect: jest.fn(),        clearRect: jest.fn(),        getImageData: jest.fn(() => ({ data: [] })),        putImageData: jest.fn(),        createImageData: jest.fn(),        setTransform: jest.fn(),        drawImage: jest.fn(),        save: jest.fn(),        fillText: jest.fn(),        restore: jest.fn(),        beginPath: jest.fn(),        moveTo: jest.fn(),        lineTo: jest.fn(),        closePath: jest.fn(),        stroke: jest.fn(),        translate: jest.fn(),        scale: jest.fn(),        rotate: jest.fn(),        arc: jest.fn(),        fill: jest.fn(),      }));    } catch {}  }})();