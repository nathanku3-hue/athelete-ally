// Jest测试环境设置import '@testing-library/jest-dom';// 模拟Next.js环境jest.mock('next/router', () => ({  useRouter() {    return {      route: '/',      pathname: '/',      query: {},      asPath: '/',      push: jest.fn(),      pop: jest.fn(),      reload: jest.fn(),      back: jest.fn(),      prefetch: jest.fn().mockResolvedValue(undefined),      beforePopState: jest.fn(),      events: {        on: jest.fn(),        off: jest.fn(),        emit: jest.fn(),      },      isFallback: false,    };  },}));// 模拟Next.js Image组件jest.mock('next/image', () => ({  __esModule: true,  default: (props: any) => {    const React = require('react');    return React.createElement('img', props);  },}));// 模拟Next.js Link组件jest.mock('next/link', () => ({  __esModule: true,  default: ({ children, href, ...props }: any) => {    const React = require('react');    return React.createElement('a', { href, ...props }, children);  },}));// 模拟fetch API - 使用原生fetchif (typeof global.fetch === 'undefined') {  global.fetch = require('node-fetch');}// 模拟localStorageconst localStorageMock = {  getItem: jest.fn(),  setItem: jest.fn(),  removeItem: jest.fn(),  clear: jest.fn(),};global.localStorage = localStorageMock as any;// 模拟sessionStorageconst sessionStorageMock = {  getItem: jest.fn(),  setItem: jest.fn(),  removeItem: jest.fn(),  clear: jest.fn(),};global.sessionStorage = sessionStorageMock as any;// 模拟IntersectionObserverglobal.IntersectionObserver = class IntersectionObserver {  constructor() {}  disconnect() {}  observe() {}  unobserve() {}  takeRecords() { return []; }  root = null;  rootMargin = '';  thresholds = [];};// 模拟ResizeObserverglobal.ResizeObserver = class ResizeObserver {  constructor() {}  disconnect() {}  observe() {}  unobserve() {}};// 模拟matchMedia (仅在浏览器环境中)if (typeof window !== 'undefined') {  Object.defineProperty(window, 'matchMedia', {    writable: true,    value: jest.fn().mockImplementation(query => ({      matches: false,      media: query,      onchange: null,      addListener: jest.fn(), // deprecated      removeListener: jest.fn(), // deprecated      addEventListener: jest.fn(),      removeEventListener: jest.fn(),      dispatchEvent: jest.fn(),    })),  });  // 模拟window.scrollTo  Object.defineProperty(window, 'scrollTo', {    value: jest.fn(),    writable: true,  });}// 模拟console方法以避免测试中的噪音const originalError = console.error;const originalWarn = console.warn;beforeAll(() => {  console.error = (...args: any[]) => {    if (      typeof args[0] === 'string' &&      args[0].includes('Warning: ReactDOM.render is deprecated') || String(args[0]).includes('HTMLCanvasElement.prototype.getContext') ) {
      return;
    }    originalError.call(console, ...args);  };    console.warn = (...args: any[]) => {    if (      typeof args[0] === 'string' &&      args[0].includes('componentWillReceiveProps has been renamed')    ) {      return;    }    originalWarn.call(console, ...args);  };});afterAll(() => {  console.error = originalError;  console.warn = originalWarn;});// 清理模拟afterEach(() => {  jest.clearAllMocks();  localStorageMock.clear();  sessionStorageMock.clear();});// Mock Next App Router (next/navigation)jest.mock('next/navigation', () => ({  useRouter() {    return {      push: jest.fn(), replace: jest.fn(), prefetch: jest.fn(), back: jest.fn(), forward: jest.fn(), refresh: jest.fn(),    };  },  useSearchParams() {    return new (class {      get(name: string) { return null; }      toString() { return ''; }      entries() { return [].entries(); }      keys() { return [].keys(); }      values() { return [].values(); }      [Symbol.iterator]() { return [][Symbol.iterator](); }    })();  },}));// Also mock Next internal app router path used by Next 13+/15 buildsjest.mock('next/src/client/components/navigation', () => ({  useRouter() {    return {      push: jest.fn(),      replace: jest.fn(),      prefetch: jest.fn(),      back: jest.fn(),      forward: jest.fn(),      refresh: jest.fn(),    };  },}));// Harden canvas shim: patch any available global canvas prototype directly(() => {  const g: any = globalThis as any;  const Canvas = g.HTMLCanvasElement || (g.window && g.window.HTMLCanvasElement);  if (Canvas && Canvas.prototype) {    try {      Canvas.prototype.getContext = jest.fn(() => ({        measureText: () => ({ width: 0 }),        fillRect: jest.fn(),        clearRect: jest.fn(),        getImageData: jest.fn(() => ({ data: [] })),        putImageData: jest.fn(),        createImageData: jest.fn(),        setTransform: jest.fn(),        drawImage: jest.fn(),        save: jest.fn(),        fillText: jest.fn(),        restore: jest.fn(),        beginPath: jest.fn(),        moveTo: jest.fn(),        lineTo: jest.fn(),        closePath: jest.fn(),        stroke: jest.fn(),        translate: jest.fn(),        scale: jest.fn(),        rotate: jest.fn(),        arc: jest.fn(),        fill: jest.fn(),      }));    } catch {}  }})();
// Mock Next App Router (next/navigation)
jest.mock('next/navigation', () => ({
  useRouter() {
    return {
      push: jest.fn(), replace: jest.fn(), prefetch: jest.fn(), back: jest.fn(), forward: jest.fn(), refresh: jest.fn(),
    };
  },
  useSearchParams() {
    return new (class {
      get(name: string) { return null; }
      toString() { return ''; }
      entries() { return [].entries(); }
      keys() { return [].keys(); }
      values() { return [].values(); }
      [Symbol.iterator]() { return [][Symbol.iterator](); }
    })();
  },
}));
// Jest测试环境设置import '@testing-library/jest-dom';// 模拟Next.js环境jest.mock('next/router', () => ({  useRouter() {    return {      route: '/',      pathname: '/',      query: {},      asPath: '/',      push: jest.fn(),      pop: jest.fn(),      reload: jest.fn(),      back: jest.fn(),      prefetch: jest.fn().mockResolvedValue(undefined),      beforePopState: jest.fn(),      events: {        on: jest.fn(),        off: jest.fn(),        emit: jest.fn(),      },      isFallback: false,    };  },}));// 模拟Next.js Image组件jest.mock('next/image', () => ({  __esModule: true,  default: (props: any) => {    const React = require('react');    return React.createElement('img', props);  },}));// 模拟Next.js Link组件jest.mock('next/link', () => ({  __esModule: true,  default: ({ children, href, ...props }: any) => {    const React = require('react');    return React.createElement('a', { href, ...props }, children);  },}));// 模拟fetch API - 使用原生fetchif (typeof global.fetch === 'undefined') {  global.fetch = require('node-fetch');}// 模拟localStorageconst localStorageMock = {  getItem: jest.fn(),  setItem: jest.fn(),  removeItem: jest.fn(),  clear: jest.fn(),};global.localStorage = localStorageMock as any;// 模拟sessionStorageconst sessionStorageMock = {  getItem: jest.fn(),  setItem: jest.fn(),  removeItem: jest.fn(),  clear: jest.fn(),};global.sessionStorage = sessionStorageMock as any;// 模拟IntersectionObserverglobal.IntersectionObserver = class IntersectionObserver {  constructor() {}  disconnect() {}  observe() {}  unobserve() {}  takeRecords() { return []; }  root = null;  rootMargin = '';  thresholds = [];};// 模拟ResizeObserverglobal.ResizeObserver = class ResizeObserver {  constructor() {}  disconnect() {}  observe() {}  unobserve() {}};// 模拟matchMedia (仅在浏览器环境中)if (typeof window !== 'undefined') {  Object.defineProperty(window, 'matchMedia', {    writable: true,    value: jest.fn().mockImplementation(query => ({      matches: false,      media: query,      onchange: null,      addListener: jest.fn(), // deprecated      removeListener: jest.fn(), // deprecated      addEventListener: jest.fn(),      removeEventListener: jest.fn(),      dispatchEvent: jest.fn(),    })),  });  // 模拟window.scrollTo  Object.defineProperty(window, 'scrollTo', {    value: jest.fn(),    writable: true,  });}// 模拟console方法以避免测试中的噪音const originalError = console.error;const originalWarn = console.warn;beforeAll(() => {  console.error = (...args: any[]) => {    if (      typeof args[0] === 'string' &&      args[0].includes('Warning: ReactDOM.render is deprecated') || String(args[0]).includes('HTMLCanvasElement.prototype.getContext') ) {
      return;
    }    originalError.call(console, ...args);  };    console.warn = (...args: any[]) => {    if (      typeof args[0] === 'string' &&      args[0].includes('componentWillReceiveProps has been renamed')    ) {      return;    }    originalWarn.call(console, ...args);  };});afterAll(() => {  console.error = originalError;  console.warn = originalWarn;});// 清理模拟afterEach(() => {  jest.clearAllMocks();  localStorageMock.clear();  sessionStorageMock.clear();});// Mock Next App Router (next/navigation)jest.mock('next/navigation', () => ({  useRouter() {    return {      push: jest.fn(), replace: jest.fn(), prefetch: jest.fn(), back: jest.fn(), forward: jest.fn(), refresh: jest.fn(),    };  },  useSearchParams() {    return new (class {      get(name: string) { return null; }      toString() { return ''; }      entries() { return [].entries(); }      keys() { return [].keys(); }      values() { return [].values(); }      [Symbol.iterator]() { return [][Symbol.iterator](); }    })();  },}));// Also mock Next internal app router path used by Next 13+/15 buildsjest.mock('next/src/client/components/navigation', () => ({  useRouter() {    return {      push: jest.fn(),      replace: jest.fn(),      prefetch: jest.fn(),      back: jest.fn(),      forward: jest.fn(),      refresh: jest.fn(),    };  },}));// Harden canvas shim: patch any available global canvas prototype directly(() => {  const g: any = globalThis as any;  const Canvas = g.HTMLCanvasElement || (g.window && g.window.HTMLCanvasElement);  if (Canvas && Canvas.prototype) {    try {      Canvas.prototype.getContext = jest.fn(() => ({        measureText: () => ({ width: 0 }),        fillRect: jest.fn(),        clearRect: jest.fn(),        getImageData: jest.fn(() => ({ data: [] })),        putImageData: jest.fn(),        createImageData: jest.fn(),        setTransform: jest.fn(),        drawImage: jest.fn(),        save: jest.fn(),        fillText: jest.fn(),        restore: jest.fn(),        beginPath: jest.fn(),        moveTo: jest.fn(),        lineTo: jest.fn(),        closePath: jest.fn(),        stroke: jest.fn(),        translate: jest.fn(),        scale: jest.fn(),        rotate: jest.fn(),        arc: jest.fn(),        fill: jest.fn(),      }));    } catch {}  }})();
// Mock plan generation hook to avoid QueryClient requirement in a11y tests
jest.mock('@/hooks/useGeneratePlan', () => ({
  useGeneratePlan: () => ({
    mutateAsync: jest.fn().mockResolvedValue({ jobId: 'test_job', status: 'queued' }),
    isPending: false,
    isError: false,
    error: null,
  }),
}));

