name: Deploy to Productionconcurrency:  group: ${{ github.workflow }}-${{ github.ref }}  cancel-in-progress: trueon:  push:    branches: [main]  pull_request:    branches: [main]permissions:  contents: read  packages: write  id-token: writeenv:  NODE_VERSION: '20'  REGISTRY: ghcr.io  IMAGE_NAME: ${{ github.repository }}jobs:  sanity:    uses: ./.github/workflows/_sanity-reuse.yml  test:    runs-on: ubuntu-latest    needs: sanity    env:      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}    steps:      - name: Checkout code (selected ref)        uses: actions/checkout@v4        with:          ref: ${{ github.ref }}      - name: Setup Node.js        uses: actions/setup-node@v4        with:          node-version: '20.18.0'  # Á°Æ‰øùNode 20.18.0          cache: 'npm'          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}      - name: Show tool versions        run: |          node -v          npm -v      - name: Install dependencies        run: npm ci      - name: Generate Prisma clients (all services)        run: |          set -euo pipefail          bash ./scripts/generate-prisma-clients.sh      - name: Verify Prisma clients (per service)        run: |          set -euo pipefail          echo "üîé Verifying per-service Prisma clients..."          missing=0          for svc in services/*; do            if [ -f "$svc/prisma/schema.prisma" ]; then              echo "‚Ä¢ $svc: expect $svc/prisma/generated/client"              if [ -d "$svc/prisma/generated/client" ]; then                echo "  ‚úÖ found"              else                echo "  ‚ùå missing $svc/prisma/generated/client"                ls -la "$svc/prisma" || true                missing=1              fi            fi          done          [ "$missing" -eq 0 ] || { echo "‚ùå Prisma client missing"; exit 1; }      - name: Run linting        run: npm run lint      - name: Run type checking        run: npm run type-check      - name: Start Frontend Service        run: |          echo "üöÄ Starting frontend service for tests..."          cd apps/frontend          npm run build          npm start &          FRONTEND_PID=$!          echo "FRONTEND_PID=$FRONTEND_PID" >> "$GITHUB_ENV"                    # Wait for frontend to be ready          echo "‚è≥ Waiting for frontend service to be ready..."          for i in {1..30}; do            if curl -sf http://localhost:3000/api/health > /dev/null 2>&1; then              echo "‚úÖ Frontend service is ready!"              break            fi            echo "Waiting for frontend... (attempt $i/30)"            sleep 2          done      - name: Run tests        run: npm run test:coverage      - name: Stop Frontend Service        if: always()        run: |          echo "üõë Stopping frontend service..."          if [ -n "$FRONTEND_PID" ]; then            kill "$FRONTEND_PID" 2>/dev/null || true          fi          # Kill any remaining node processes on port 3000          lsof -ti:3000 | xargs kill -9 2>/dev/null || true      - name: Upload coverage to Codecov        if: ${{ env.CODECOV_TOKEN != '' }}        uses: codecov/codecov-action@v4        with:          token: ${{ env.CODECOV_TOKEN }}          file: ./coverage/lcov.info        continue-on-error: true  build:    needs: [sanity, test]    runs-on: ubuntu-latest    steps:      - name: Checkout code (selected ref)        uses: actions/checkout@v4        with:          ref: ${{ github.ref }}      - name: Setup Node.js        uses: actions/setup-node@v4        with:          node-version: '20.18.0'  # Á°Æ‰øùNode 20.18.0          cache: 'npm'          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}      - name: Show tool versions        run: |          node -v          npm -v      - name: Install dependencies        run: npm ci      - name: Build application        run: npm run build      - name: Verify Next.js build output        run: |          if [ ! -d "apps/frontend/.next" ]; then            echo "‚ùå Build output not found at apps/frontend/.next"            exit 1          else            echo "‚úÖ Build output found at apps/frontend/.next"          fi      - name: Upload build artifacts        uses: actions/upload-artifact@v4        with:          name: build-files          path: apps/frontend/.next/  security:    runs-on: ubuntu-latest    env:      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}    steps:      - name: Checkout code        uses: actions/checkout@v4      - name: Setup Node.js (Security)        uses: actions/setup-node@v4        with:          node-version: '20.18.0'          cache: 'npm'          cache-dependency-path: |            package-lock.json            apps/**/package-lock.json            packages/**/package-lock.json            services/**/package-lock.json      - name: Install dependencies (Security)        run: npm ci      - name: Show Node/npm versions (Security)        run: |          node -v          npm -v      - name: Run security audit        run: npm audit --audit-level moderate      - name: Install Snyk CLI        if: ${{ env.SNYK_TOKEN != '' }}        run: npm i -g snyk@latest        continue-on-error: true      - name: Snyk test        if: ${{ env.SNYK_TOKEN != '' }}        run: snyk test --severity-threshold=high --exclude=dist,.turbo,coverage,.next,prisma/generated        env:          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}        continue-on-error: true  docker:    needs: [test, build]    runs-on: ubuntu-latest    steps:      - name: Checkout code        uses: actions/checkout@v4      - name: Set up Docker Buildx        uses: docker/setup-buildx-action@v3      - name: Set environment variables        run: |          echo "GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}" >> "$GITHUB_ENV"          echo "REGISTRY=ghcr.io" >> "$GITHUB_ENV"      - name: Show Docker versions        run: |          docker version          docker buildx version      - name: Log in to GHCR with PAT (fallback)        if: env.REGISTRY == 'ghcr.io' && env.GHCR_TOKEN != ''        uses: docker/login-action@v3        with:          registry: ghcr.io          username: ${{ github.actor }}          password: ${{ secrets.GHCR_TOKEN }}      - name: Log in to GHCR        if: env.REGISTRY == 'ghcr.io'        uses: docker/login-action@v3        with:          registry: ghcr.io          username: ${{ github.actor }}          password: ${{ secrets.GITHUB_TOKEN }}      - name: Verify Docker credentials        if: env.REGISTRY != 'ghcr.io'        run: |          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then            echo "‚ùå Docker credentials not configured"            exit 1          fi          echo "‚úÖ Docker credentials configured"      - name: Log in to Container Registry        if: env.REGISTRY != 'ghcr.io'        uses: docker/login-action@v3        with:          registry: ${{ env.REGISTRY }}          username: ${{ secrets.DOCKER_USERNAME }}          password: ${{ secrets.DOCKER_PASSWORD }}      - name: Extract metadata        id: meta        uses: docker/metadata-action@v5        with:          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}          tags: |            type=ref,event=branch            type=ref,event=pr            type=sha,format=short,prefix=sha-            type=raw,value=latest,enable={{is_default_branch}}      - name: Validate Dockerfile formatting        run: |          echo 'Dockerfile lines: '           head -n 20 Dockerfile || true          echo 'Hex (first 160 bytes):'          hexdump -C Dockerfile | head -n 10 || true      - name: Dry build (no push)        run: |          docker build --progress=plain -f Dockerfile .      - name: Build and push Docker image        uses: docker/build-push-action@v5        with:          context: .          file: ./Dockerfile          push: ${{ github.event_name != 'pull_request' }}          tags: ${{ steps.meta.outputs.tags }}          labels: ${{ steps.meta.outputs.labels }}          cache-from: type=gha          cache-to: type=gha,mode=max  deploy:    needs: [test, build, docker]    runs-on: ubuntu-latest    if: github.ref == 'refs/heads/main'    # environment: production  # Commented out - environment needs to be created in GitHub repo settings    steps:      - name: Deployment context summary        run: |          echo "Ref: $GITHUB_REF"          echo "SHA: $GITHUB_SHA"          echo "Actor: $GITHUB_ACTOR"      - name: Deploy to production        run: |          echo "Deploying to production..."          # ËøôÈáåÊ∑ªÂä†‰Ω†ÁöÑÈÉ®ÁΩ≤ÈÄªËæë          # ‰æãÂ¶ÇÔºökubectl apply, docker-compose up, Á≠âÁ≠â  notify:    needs: [deploy]    runs-on: ubuntu-latest    if: always()    steps:      - name: Notify deployment status        run: |          if [ "${{ needs.deploy.result }}" == "success" ]; then            echo "‚úÖ Deployment successful!"          else            echo "‚ùå Deployment failed!"          fi