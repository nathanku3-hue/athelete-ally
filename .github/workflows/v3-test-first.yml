name: V3 Test-First Development Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop, feat/v3-* ]
    paths:
      - 'packages/contracts/**'
      - 'services/**'
      - 'apps/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/contracts/**'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual verification'

jobs:
  # ÂêàÂêåÊ∏¨Ë©¶
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          grep -q '"jest-environment-jsdom"' package-lock.json && echo "‚úÖ Lock includes jest-environment-jsdom" || (echo "‚ùå Lock missing jsdom env"; exit 1)
          grep -q '"jsdom"' package-lock.json && echo "‚úÖ Lock includes jsdom" || echo "‚ùå Lock missing jsdom"
          grep -q '"@types/jsdom"' package-lock.json && echo "‚úÖ Lock includes @types/jsdom" || echo "‚ùå Lock missing @types/jsdom"

      - name: Discover lockfiles
        id: locks
        run: |
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          git ls-files **/package-lock.json || find . -name "package-lock.json" -not -path "./node_modules/*"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.locks.outputs.paths }}

      - name: Install dependencies
        run: npm ci

      - name: Run contract tests
        run: npm run test:contracts -w packages/contracts

      - name: Upload contract test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results
          path: packages/contracts/coverage/

  # Êï∏ÊìöÂ∫´Ê®°ÂûãÊ∏¨Ë©¶
  database-tests:
    name: Database Model Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          grep -q '"jest-environment-jsdom"' package-lock.json && echo "‚úÖ Lock includes jest-environment-jsdom" || (echo "‚ùå Lock missing jsdom env"; exit 1)
          grep -q '"jsdom"' package-lock.json && echo "‚úÖ Lock includes jsdom" || echo "‚ùå Lock missing jsdom"
          grep -q '"@types/jsdom"' package-lock.json && echo "‚úÖ Lock includes @types/jsdom" || echo "‚ùå Lock missing @types/jsdom"

      - name: Discover lockfiles
        id: locks
        run: |
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          git ls-files **/package-lock.json || find . -name "package-lock.json" -not -path "./node_modules/*"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.locks.outputs.paths }}

      - name: Install dependencies
        run: npm ci

      - name: Run database tests
        run: npm run test:database -w packages/contracts
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload database test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: database-test-results
          path: packages/contracts/coverage/

  # API Á´ØÈªûÊ∏¨Ë©¶
  api-tests:
    name: API Endpoint Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          grep -q '"jest-environment-jsdom"' package-lock.json && echo "‚úÖ Lock includes jest-environment-jsdom" || (echo "‚ùå Lock missing jsdom env"; exit 1)
          grep -q '"jsdom"' package-lock.json && echo "‚úÖ Lock includes jsdom" || echo "‚ùå Lock missing jsdom"
          grep -q '"@types/jsdom"' package-lock.json && echo "‚úÖ Lock includes @types/jsdom" || echo "‚ùå Lock missing @types/jsdom"

      - name: Discover lockfiles
        id: locks
        run: |
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          git ls-files **/package-lock.json || find . -name "package-lock.json" -not -path "./node_modules/*"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.locks.outputs.paths }}

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: npm run test:api -w packages/contracts

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: packages/contracts/coverage/

  # ÈõÜÊàêÊ∏¨Ë©¶
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (root level only)
        run: npm ci

      - name: Verify tsx availability
        run: npx tsx --version

      # È¢ÑÊ£ÄÊü•Á´ØÂè£Áä∂ÊÄÅ (LinuxÂÖºÂÆπ)
      - name: Pre-flight port check (Linux compatible)
        run: |
          ss -tulpen | grep -E ':(5432|6379|4222)\b' || echo "Ports available"
          if ss -tulpen | grep -E ':(5432|6379|4222)\b'; then
            echo "‚ö†Ô∏è Ports occupied, will use isolated project name"
          fi

      # Ê∏ÖÁêÜÊóßÁöÑDockerÂÆπÂô®ÂíåÁΩëÁªú (È°πÁõÆËåÉÂõ¥)
      - name: Clean up existing containers (project-scoped)
        run: |
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml down -v --remove-orphans || true

      - name: Verify CI configuration
        run: |
          echo "üîç Rendering final Docker Compose configuration..."
          docker compose -f ./docker-compose.ci-standalone.yml config > final-config.yml
          
          echo "üìã Checking for ports configuration..."
          if grep -q '^\s*ports:' final-config.yml; then
            echo "‚ùå Ports still present in CI config:"
            grep -n '^\s*ports:' final-config.yml
            exit 1
          else
            echo "‚úÖ No ports found in CI config - isolation working"
          fi
          
          echo "üìã Final configuration summary:"
          grep -A 5 -B 2 'redis:\|postgres:\|nats:' final-config.yml

      # ÂêØÂä®ÈöîÁ¶ªÁöÑÊµãËØïÂü∫Á°ÄËÆæÊñΩÊúçÂä°
      - name: Start isolated test services
        run: |
          docker compose -p ci_${{ github.run_id }} \
            -f ./docker-compose.ci-standalone.yml \
            up -d postgres redis nats

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be healthy..."
          timeout 60 bash -c 'until docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml ps | grep -q "healthy"; do sleep 2; done' || true
          echo "All services are healthy"

      - name: Verify services status
        run: |
          # È™åËØÅÂü∫Á°ÄËÆæÊñΩÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ÂêØÂä®
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml ps

      - name: Verify service connectivity
        run: |
          echo "üîç Testing service connectivity..."
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml exec -T redis redis-cli ping || echo "‚ùå Redis connection failed"
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml exec -T postgres pg_isready -U athlete || echo "‚ùå PostgreSQL connection failed"
          
          # ‰ΩøÁî®curlÂÆπÂô®Ê£ÄÊü•NATSËøûÊé•
          NET="ci_${{ github.run_id }}_ci-network"
          docker run --rm --network "$NET" curlimages/curl:8.8.0 -sf http://nats:8222/varz || echo "‚ùå NATS connection failed"

      - name: Service diagnostics (on failure)
        if: failure()
        run: |
          echo "üîç Service diagnostics..."
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml ps
          echo "üìã Service logs:"
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml logs --tail=200

      - name: Run integration tests
        run: npm run test:integration -w packages/contracts
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/test_db
          REDIS_URL: redis://redis:6379

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: packages/contracts/coverage/

      # Ê∏ÖÁêÜÊµãËØïÂü∫Á°ÄËÆæÊñΩÊúçÂä° (È°πÁõÆËåÉÂõ¥)
      - name: Stop test services (project-scoped)
        if: always()
        run: |
          docker compose -p ci_${{ github.run_id }} -f ./docker-compose.ci-standalone.yml down -v --remove-orphans

  # ÊÄßËÉΩÊ∏¨Ë©¶
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          grep -q '"jest-environment-jsdom"' package-lock.json && echo "‚úÖ Lock includes jest-environment-jsdom" || (echo "‚ùå Lock missing jsdom env"; exit 1)
          grep -q '"jsdom"' package-lock.json && echo "‚úÖ Lock includes jsdom" || echo "‚ùå Lock missing jsdom"
          grep -q '"@types/jsdom"' package-lock.json && echo "‚úÖ Lock includes @types/jsdom" || echo "‚ùå Lock missing @types/jsdom"

      - name: Discover lockfiles
        id: locks
        run: |
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          git ls-files **/package-lock.json || find . -name "package-lock.json" -not -path "./node_modules/*"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.locks.outputs.paths }}

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance -w packages/contracts

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: packages/contracts/performance-results/

  # Ê∏¨Ë©¶Â†±ÂëäËÅöÂêà
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [contract-tests, database-tests, api-tests, integration-tests]
    if: always()
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          grep -q '"jest-environment-jsdom"' package-lock.json && echo "‚úÖ Lock includes jest-environment-jsdom" || (echo "‚ùå Lock missing jsdom env"; exit 1)
          grep -q '"jsdom"' package-lock.json && echo "‚úÖ Lock includes jsdom" || echo "‚ùå Lock missing jsdom"
          grep -q '"@types/jsdom"' package-lock.json && echo "‚úÖ Lock includes @types/jsdom" || echo "‚ùå Lock missing @types/jsdom"

      - name: Discover lockfiles
        id: locks
        run: |
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          git ls-files **/package-lock.json || find . -name "package-lock.json" -not -path "./node_modules/*"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.locks.outputs.paths }}

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test report
        working-directory: ${{ github.workspace }}
        run: node ./scripts/generate-test-report.js

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-results/

  # ‰ª£Á¢ºË≥™ÈáèÊ™¢Êü•
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          grep -q '"jest-environment-jsdom"' package-lock.json && echo "‚úÖ Lock includes jest-environment-jsdom" || (echo "‚ùå Lock missing jsdom env"; exit 1)
          grep -q '"jsdom"' package-lock.json && echo "‚úÖ Lock includes jsdom" || echo "‚ùå Lock missing jsdom"
          grep -q '"@types/jsdom"' package-lock.json && echo "‚úÖ Lock includes @types/jsdom" || echo "‚ùå Lock missing @types/jsdom"

      - name: Discover lockfiles
        id: locks
        run: |
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          git ls-files **/package-lock.json || find . -name "package-lock.json" -not -path "./node_modules/*"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.locks.outputs.paths }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx turbo run lint

      - name: Run TypeScript check
        run: npm run type-check -w packages/contracts

      - name: Check test coverage
        run: |
          npm run test:coverage -w packages/contracts
          npm run coverage:check -w packages/contracts

