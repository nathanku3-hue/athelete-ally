name: V3 Test-First Development Pipeline

on:
  push:
    branches: [ main, develop, feat/v3-* ]
    paths:
      - 'packages/contracts/**'
      - 'services/**'
      - 'apps/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/contracts/**'
      - 'services/**'
      - 'apps/**'

jobs:
  # 合同測試
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install --no-audit --no-fund

      - name: Run contract tests
        run: |
          cd packages/contracts
          npm run test:contracts

      - name: Upload contract test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results
          path: packages/contracts/coverage/

  # 數據庫模型測試
  database-tests:
    name: Database Model Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install --no-audit --no-fund

      - name: Run database tests
        run: |
          cd packages/contracts
          npm run test:database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload database test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: database-test-results
          path: packages/contracts/coverage/

  # API 端點測試
  api-tests:
    name: API Endpoint Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install --no-audit --no-fund

      - name: Run API tests
        run: |
          cd packages/contracts
          npm run test:api

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: packages/contracts/coverage/

  # 集成測試
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install --no-audit --no-fund

      - name: Start test services
        run: |
          # 啟動測試服務
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          # 等待服務啟動
          sleep 30

      - name: Run integration tests
        run: |
          cd packages/contracts
          npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: packages/contracts/coverage/

      - name: Stop test services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  # 性能測試
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install --no-audit --no-fund

      - name: Run performance tests
        run: |
          cd packages/contracts
          npm run test:performance

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: packages/contracts/performance-results/

  # 測試報告聚合
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [contract-tests, database-tests, api-tests, integration-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test report
        run: |
          # 生成綜合測試報告
          node scripts/generate-test-report.js

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-results/report.html

  # 代碼質量檢查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install --no-audit --no-fund

      - name: Run ESLint
        run: |
          cd packages/contracts
          npm run lint

      - name: Run TypeScript check
        run: |
          cd packages/contracts
          npm run type-check

      - name: Check test coverage
        run: |
          cd packages/contracts
          npm run test:coverage
          npm run coverage:check

