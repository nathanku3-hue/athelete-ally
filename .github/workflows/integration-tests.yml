concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

name: Integration Tests

on:
  pull_request:
    paths:
      - 'services/**/*.ts'
      - 'packages/**/*.ts'
  push:
    branches: [main]
    paths:
      - 'services/**/*.ts'
      - 'packages/**/*.ts'

permissions:
  contents: read

jobs:
  sanity:
    uses: ./.github/workflows/_sanity-reuse.yml

  integration-tests:
    name: Integration Tests (Non-Blocking)
    runs-on: ubuntu-latest
    needs: [sanity]
    continue-on-error: true
    env:
      ARTIFACT_SUFFIX: ${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-na
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_planning
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path || 'package-lock.json' }}

      - name: Enable Corepack
        run: corepack enable

      - name: Verify Node.js and npm versions
        run: |
          node_version=$(node -v)
          npm_version=$(npm -v)
          echo "Node.js version: $node_version"
          echo "npm version: $npm_version"

          # Check Node.js version is 20.18.x
          if [[ ! $node_version =~ ^v20\.18\. ]]; then
            echo "‚ùå Error: Node.js version must be 20.18.x, got $node_version"
            exit 1
          fi

          # Check npm version is 10.x
          if [[ ! $npm_version =~ ^10\. ]]; then
            echo "‚ùå Error: npm version must be 10.x, got $npm_version"
            exit 1
          fi

          echo "‚úÖ Version check passed: Node.js $node_version, npm $npm_version"

      - name: Install dependencies


        run: npm ci --workspaces --include-workspace-root --no-audit --no-fund
      - name: Cache Prisma engines
        uses: actions/cache@v4
        with:
          path: ~/.cache/prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-prisma-

      - name: Generate Prisma clients
        run: |
          set -euo pipefail
          chmod +x "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh"
          for schema in $(git ls-files 'services/**/prisma/schema.prisma'); do
            service_dir=$(dirname "$(dirname "$schema")")
            "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh" "$service_dir"
          done
        env:
          PRISMA_ENGINES_MIRROR: ${{ secrets.PRISMA_ENGINES_MIRROR }}

      - name: Setup test database
        run: |
          set -euo pipefail
          echo "üîß Setting up test database..."
          cd services/planning-engine
          export PLANNING_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_planning"
          export REDIS_URL="redis://localhost:6379"
          export NODE_ENV="test"
          
          # Run migrations
          npx prisma migrate deploy
          
          # Seed database if needed
          if [ -f "prisma/seed.ts" ]; then
            npx prisma db seed
          fi
          
          echo "‚úÖ Test database setup complete"

      - name: Run integration tests
        run: |
          set -euo pipefail
          echo "üß™ Running integration tests..."
          cd services/planning-engine
          
          # Set test environment variables
          export PLANNING_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_planning"
          export REDIS_URL="redis://localhost:6379"
          export NODE_ENV="test"
          
          # Run integration tests with real database - use standardized jest:bin script
          npm run jest:bin -- --config jest.config.cjs \
            --testPathPattern="(message-reliability|reliability|integration)" \
            --runInBand \
            --verbose \
            --detectOpenHandles \
            --forceExit

      - name: Upload integration test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs-${{ env.ARTIFACT_SUFFIX }}
          if-no-files-found: ignore
          path: |
            services/planning-engine/test-results/
            services/planning-engine/logs/
          retention-days: 7
          compression-level: 6
          overwrite: true

      - name: Cleanup test database
        if: always()
        run: |
          set -euo pipefail
          echo "üßπ Cleaning up test database..."
          cd services/planning-engine
          export PLANNING_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_planning"
          
          # Drop test database
          npx prisma migrate reset --force || true
          
          echo "‚úÖ Test database cleanup complete"
