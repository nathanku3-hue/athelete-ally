name: Backend Deploy

on:
  push:
    branches: [main]
    paths: ['services/planning-engine/**']
  pull_request:
    branches: [main]
    paths: ['services/planning-engine/**']

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      
      - name: "Sanity: print ref and verify lock contains jsdom env"
        run: |
          set -euo pipefail
          echo "=== GIT BRANCH VERIFICATION ==="
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "=== PACKAGE-LOCK.JSON VERIFICATION ==="
          echo "Lock file size: $(wc -c < package-lock.json) bytes"
          echo "Lock file last modified: $(stat -c %y package-lock.json)"
          echo "=== CHECKING JSDOM DEPENDENCIES ==="
          if grep -q "\"jest-environment-jsdom\"" package-lock.json; then
            echo "✅ Lock includes jest-environment-jsdom"
          else
            echo "❌ Lock missing jsdom env"; exit 1
          fi
          if grep -q "\"jsdom\"" package-lock.json; then
            echo "✅ Lock includes jsdom"
          else
            echo "❌ Lock missing jsdom"
          fi
          if grep -q "\"@types/jsdom\"" package-lock.json; then
            echo "✅ Lock includes @types/jsdom"
          else
            echo "❌ Lock missing @types/jsdom"
          fi
      - name: "Discover lockfiles"
        run: |
          set -euo pipefail
          {
            echo "paths<<EOF"
            git ls-files -- '**/package-lock.json' || find . -type f -name 'package-lock.json' -not -path './node_modules/*'
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: Install dependencies (root level)
        run: npm ci
      
      - name: Run linting (workspace)
        run: npm run lint -w services/planning-engine
      
      - name: Run tests (workspace)
        run: npm run test -w services/planning-engine
      
      - name: Build application (workspace)
        run: npm run build -w services/planning-engine

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      
      - name: Build Docker image
        run: |
          cd services/planning-engine
          docker build -t athlete-ally/planning-engine:latest .
      
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # 这里添加实际的部署命令

