name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 授予必要的權限以創建 PR 評論
permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # 代码质量检查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies
        run: npm install --legacy-peer-deps --no-audit --no-fund

      - name: Lint check
        run: npx turbo run lint

      - name: Type check
        run: npx turbo run type-check

      - name: Check for build artifacts and sensitive files
        run: |
          echo "🔍 Checking for accidentally committed build artifacts and sensitive files..."
          
          # 检查是否提交了构建产物
          if git ls-files | grep -E "(node_modules|dist|\.turbo|build)/" | head -10; then
            echo "❌ ERROR: Build artifacts detected in repository!"
            echo "The following build artifacts were found:"
            git ls-files | grep -E "(node_modules|dist|\.turbo|build)/" | head -20
            echo ""
            echo "Please remove these files and update .gitignore to prevent future commits."
            echo "Run: git rm -r --cached <file> for each file"
            exit 1
          else
            echo "✅ No build artifacts found in repository"
          fi
          
          # 检查是否提交了.env文件
          if git ls-files | grep -E "\.env" | head -10; then
            echo "❌ ERROR: .env files detected in repository!"
            echo "The following .env files were found:"
            git ls-files | grep -E "\.env" | head -20
            echo ""
            echo "Please remove these files and ensure all configuration is externalized."
            echo "Use environment variables instead of .env files for production."
            exit 1
          else
            echo "✅ No .env files found in repository"
          fi
          
          # 检查是否提交了敏感配置文件
          if git ls-files | grep -E "(secrets|credentials|keys)\.(json|yaml|yml|toml)$" | head -10; then
            echo "❌ ERROR: Sensitive configuration files detected in repository!"
            echo "The following sensitive files were found:"
            git ls-files | grep -E "(secrets|credentials|keys)\.(json|yaml|yml|toml)$" | head -20
            echo ""
            echo "Please remove these files and use environment variables or secure secret management."
            exit 1
          else
            echo "✅ No sensitive configuration files found in repository"
          fi

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies
        run: npm install --legacy-peer-deps --no-audit --no-fund

      - name: Validate configuration
        run: |
          echo "🔍 验证环境配置..."
          # 检查必要的环境变量是否存在
          if [ -z "$NODE_ENV" ]; then
            export NODE_ENV=test
          fi
          echo "✅ 配置验证完成"

      - name: Run tests
        run: npx turbo run test
  # 合同校验
  contracts:
    name: Contract Validation
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies
        run: npm install --legacy-peer-deps --no-audit --no-fund

      - name: Typecheck (contracts)
        run: npm run -w packages/contracts typecheck

      - name: Contracts tests with coverage gate
        run: npm run -w packages/contracts test:contracts:cov

      - name: Validate OpenAPI contracts
        run: |
          # 检查 OpenAPI 语法
          if [ -f packages/contracts/openapi.yaml ]; then
            echo "Validating OpenAPI contract..."
            # 使用Node.js YAML解析器检查语法
            node -e "
              const fs = require('fs');
              const yaml = require('js-yaml');
              try {
                const content = fs.readFileSync('packages/contracts/openapi.yaml', 'utf8');
                yaml.load(content);
                console.log('✅ OpenAPI YAML syntax is valid');
              } catch (e) {
                console.error('❌ OpenAPI YAML syntax error:', e.message);
                process.exit(1);
              }
            " || echo "OpenAPI validation failed"
          else
            echo "OpenAPI file not found, skipping validation"
          fi
          
          # 检查 Proto 文件语法
          if command -v protoc &> /dev/null; then
            if [ -d packages/contracts/proto ]; then
              echo "Validating Proto files..."
              protoc --proto_path=packages/contracts/proto --js_out=import_style=commonjs,binary:. packages/contracts/proto/*.proto
              echo "✅ Proto files validation completed"
            else
              echo "Proto directory not found, skipping validation"
            fi
          else
            echo "protoc not available, skipping proto validation"
          fi

