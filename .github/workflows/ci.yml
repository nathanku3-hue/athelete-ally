name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  merge_group:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-validate:
    name: Build + Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Validate IDs (duplicate + format)
        run: npm run validate:ids

      - name: Block hub edits unless allowhubedit label
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('node:child_process');
            const hasLabel = (context.payload.pull_request.labels || []).some(l => l.name === 'allowhubedit');
            if (!hasLabel) {
              execSync('npm run --silent check:nohub', { stdio: 'inherit' });
            } else {
              core.info('allowhubedit label present; skipping hub edit block');
            }

      - name: Prettier Shard Scope
        run: |
          npx --no prettier --check "scripts/**/*.{md,mdx,yml,yaml,json,ts,tsx,js,cjs,mjs}" || true
          npx --no prettier --check "openapi/**/*.{md,mdx,yml,yaml,json,ts,tsx,js,cjs,mjs}" || true
          npx --no prettier --check "monitoring/**/*.{md,mdx,yml,yaml,json,ts,tsx,js,cjs,mjs}" || true
          npx --no prettier --check "docs/**/*.{md,mdx,yml,yaml,json,ts,tsx,js,cjs,mjs}" || true
          npx --no prettier --check "registry/**/*.{md,mdx,yml,yaml,json,ts,tsx,js,cjs,mjs}" || true
          npx --no prettier --check ".github/**/*.{md,mdx,yml,yaml,json,ts,tsx,js,cjs,mjs}" || true

      - name: Generate Prisma Clients
        run: |
          set -euo pipefail
          # Generate Prisma clients for all services that use Prisma
          for service in services/*/; do
            if [ -f "${service}prisma/schema.prisma" ] || [ -f "${service}prisma/schema-v3.prisma" ]; then
              echo "Generating Prisma client for $(basename "$service")"
              cd "$service"
              npx prisma generate
              cd - > /dev/null
            fi
          done

      - name: Build All Hubs
        run: npm run build:all

      - name: Spectral Lint (OpenAPI)
        run:
          npx --no @stoplight/spectral-cli lint openapi.yaml openapi/paths/**/*.yaml
          openapi/components/**/*.yaml || true

      - name: Install promtool
        run: |
          set -euo pipefail
          VER=2.52.0
          curl -sSL -o /tmp/prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v${VER}/prometheus-${VER}.linux-amd64.tar.gz
          tar -xf /tmp/prometheus.tar.gz -C /tmp
          sudo mv /tmp/prometheus-${VER}.linux-amd64/promtool /usr/local/bin/promtool
          promtool --version

      - name: Promtool Validate Rules
        run: |
          if [ -f monitoring/alert_rules.yml ]; then
            promtool check rules monitoring/alert_rules.yml
          else
            echo "No hub alert_rules.yml present; skipping"
          fi

      - name: Verify Hubs Match (if tracked)
        shell: bash
        run: |
          set -euo pipefail
          failed=0
          hubs=(
            README.md
            docs/README.md
            docs/runbook/index.md
            openapi.yaml
            monitoring/alert_rules.yml
            monitoring/grafana/dashboards/index.json
            CHANGELOG.md
            registry.json
            registry.ts
            infra/index.yaml
            protobuf/registry.yaml
            sql/migrations/catalog.yaml
          )
          for f in "${hubs[@]}"; do
            if git ls-files --error-unmatch "$f" >/dev/null 2>&1; then
              if ! git diff --exit-code -- "$f"; then
                echo "Hub drift detected: $f differs after build"
                failed=1
              fi
            fi
          done
          if [ "$failed" -ne 0 ]; then
            echo "Run generators locally (npm run build:all). Commit hubs only with label allowhubedit."
            exit 1
          fi
