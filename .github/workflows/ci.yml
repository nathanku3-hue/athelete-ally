name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# ?????????? PR ??
permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.18.0'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  # CI????
  NODE_ENV: test
  PROMETHEUS_PORT: 9090
  GRAFANA_PORT: 3001
  GF_SECURITY_ADMIN_PASSWORD: admin123
  JAEGER_PORT: 16686
  OPENAI_API_KEY: test_openai_key_for_ci
  JWT_SECRET: test_jwt_secret_for_ci
  ENCRYPTION_KEY: test_encryption_key_for_ci
  # ?? URLs
  FRONTEND_URL: http://localhost:3000
  GATEWAY_BFF_URL: http://localhost:4000
  API_BASE_URL: http://localhost:4000
  NPM_CONFIG_FETCH_RETRIES: "5"
  NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: "20000"
  NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: "120000"
  NPM_CONFIG_NETWORK_TIMEOUT: "600000"
  NPM_CONFIG_REGISTRY: "https://registry.npmjs.org/"
  NPM_CONFIG_AUDIT: "false"
  NPM_CONFIG_FUND: "false"
jobs:
  # Sanity check and lock discovery
  sanity:
    uses: ./.github/workflows/_sanity-reuse.yml

  # ??????
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: sanity
    steps:
      - name: Checkout (selected ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Cache Prisma engines
        uses: actions/cache@v4
        with:
          path: ~/.cache/prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-prisma-

      - name: Generate Prisma clients (all services)
        run: |
          set -euo pipefail
          chmod +x "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh"
          for schema in $(git ls-files 'services/**/prisma/schema.prisma'); do
            service_dir=$(dirname "$(dirname "$schema")")
            "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh" "$service_dir"
          done
        env:
          PRISMA_ENGINES_MIRROR: ${{ secrets.PRISMA_ENGINES_MIRROR }}

      - name: Verify Prisma clients (per service)
        run: |
          set -euo pipefail
          echo "?? Verifying per-service Prisma clients..."
          missing=0
          for svc in services/*; do
            if [ -f "$svc/prisma/schema.prisma" ]; then
              echo "? $svc: expect $svc/prisma/generated/client"
              if [ -d "$svc/prisma/generated/client" ]; then
                echo "  ? found"
              else
                echo "  ? missing $svc/prisma/generated/client"
                ls -la "$svc/prisma" || true
                missing=1
              fi
            fi
          done
          [ "$missing" -eq 0 ] || { echo "? Prisma client missing"; exit 1; }

      - name: Verify tsx availability
        run: npx tsx --version

      - name: Lint check
        run: npx turbo run lint

      - name: Generate ESLint Boundaries Report
        continue-on-error: true
        run: |
          mkdir -p reports/deps
          npx eslint . -f json > reports/deps/eslint-boundaries.json || echo "ESLint boundaries report generated with warnings"

      - name: Upload Boundaries Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-boundaries-report-${{ github.run_id }}
          path: reports/deps/eslint-boundaries.json
          retention-days: 7

      - name: Type check (force no stale cache)
        env:
          TURBO_FORCE: "true"
        run: npx turbo run type-check

      - name: Upload Prisma client dirs (debug)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: prisma-clients-${{ github.run_id }}
          path: |
            services/*/prisma/generated/client
            services/*/prisma/schema.prisma

      - name: Enforce no large tracked files
        run: |
          git ls-files -z \
          | xargs -0 -r -I{} wc -c "{}" \
          | awk '$1 > 1048576 {print $2}' \
          | tee large_tracked.txt
          if [ -s large_tracked.txt ]; then
            echo "Large tracked files detected:" && cat large_tracked.txt
            exit 1
          fi
          echo "No large tracked files"

      - name: Enforce no Prisma generated files
        run: |
          if git ls-files | grep -E '(^|/)prisma/generated/'; then
            echo "Prisma generated files detected in repository"
            git ls-files | grep -E '(^|/)prisma/generated/'
            exit 1
          fi
          echo "No Prisma generated files found"

      - name: Disallow @master actions
        run: |
          if grep -RinE '^\s*uses:\s*[^ ]+@master\b' .github/workflows/*.yml; then
            echo "Found action pinned to @master. Please pin a tag or SHA."
            exit 1
          fi
          echo "No @master action usages found"

      - name: Check for sensitive files
        run: |
          bad=$(git ls-files -z \
            | xargs -0 -I{} bash -lc 'case "{}" in \
              *.example*|*.sample*|docs/*|**/fixtures/*) ;; \
              .env|.env.*|*.pem|*.p12|*.key|id_rsa|id_dsa|.aws/credentials) echo "{}" ;; \
              *) if [ -f "{}" ] && grep -I -qE "^(SECRET|TOKEN|PASSWORD|API_KEY|ACCESS_KEY|PRIVATE_KEY)=" "{}"; then echo "{}"; fi ;; \
            esac')
          if [ -n "$bad" ]; then echo "Sensitive files detected:" && echo "$bad" && exit 1; fi
          echo "No sensitive env files"

  # ????
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [sanity, quality]
    strategy:
      matrix:
        event_stream_mode: [single, multi]
        include:
          - event_stream_mode: single
            stream_core_name: ATHLETE_ALLY_EVENTS
          - event_stream_mode: multi
            stream_core_name: AA_CORE_HOT
    outputs:
      has_artifacts: ${{ steps.results_meta.outputs.has_files }}
    steps:
      - name: Checkout (selected ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Set Matrix Environment Variables
        run: |
          echo "EVENT_STREAM_MODE=${{ matrix.event_stream_mode }}" >> $GITHUB_ENV
          echo "STREAM_CORE_NAME=${{ matrix.stream_core_name }}" >> $GITHUB_ENV
          echo "AA_STREAM_CANDIDATES=${{ matrix.event_stream_mode == 'multi' && 'AA_CORE_HOT,ATHLETE_ALLY_EVENTS' || 'ATHLETE_ALLY_EVENTS' }}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Generate Prisma clients (all services)
        run: |
          set -euo pipefail
          chmod +x "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh"
          for schema in $(git ls-files 'services/**/prisma/schema.prisma'); do
            service_dir=$(dirname "$(dirname "$schema")")
            "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh" "$service_dir"
          done
        env:
          PRISMA_ENGINES_MIRROR: ${{ secrets.PRISMA_ENGINES_MIRROR }}

      - name: Verify Prisma clients (per service)
        run: |
          set -euo pipefail
          echo "?? Verifying per-service Prisma clients..."
          missing=0
          for svc in services/*; do
            if [ -f "$svc/prisma/schema.prisma" ]; then
              echo "? $svc: expect $svc/prisma/generated/client"
              if [ -d "$svc/prisma/generated/client" ]; then
                echo "  ? found"
              else
                echo "  ? missing $svc/prisma/generated/client"
                ls -la "$svc/prisma" || true
                missing=1
              fi
            fi
          done
          [ "$missing" -eq 0 ] || { echo "? Prisma client missing"; exit 1; }

      - name: Build shared packages
        run: |
          set -euo pipefail
          echo "ðŸ”¨ Building shared packages before service tests..."
          npm run build -w packages/contracts
          npm run build -w packages/event-bus
          npm run build -w packages/protocol-types
          npm run build -w packages/shared-types
          echo "âœ… Shared packages built successfully"


      - name: Validate configuration
        run: |
          set -euo pipefail
          echo "ðŸ”§ Validating test environment..."
          # Ensure NODE_ENV is set for tests
          if [ -z "${NODE_ENV:-}" ]; then
            export NODE_ENV=test
          fi
          echo "âœ… Environment validated"

      - name: Start Frontend Service
        run: |
          set -euo pipefail
          echo "?? Starting frontend service for tests..."
          cd apps/frontend
          npm run build
          npm start &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=${FRONTEND_PID}" >> "${GITHUB_OUTPUT}"
          
          # Wait for frontend to be ready
          echo "? Waiting for frontend service to be ready..."
          for i in {1..30}; do
            if curl -sf http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "? Frontend service is ready!"
              break
            fi
            echo "Waiting for frontend... (attempt ${i}/30)"
            sleep 2
          done

      - name: CI Environment Diagnostics
        run: |
          set -euo pipefail
          echo "?? CI Environment Diagnostics:"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Jest version: $(npx jest --version)"
          echo "PLANNING_DATABASE_URL: ${PLANNING_DATABASE_URL:-unset}"
          echo "REDIS_URL: ${REDIS_URL:-unset}"
          echo "NODE_ENV: ${NODE_ENV:-unset}"
          
          echo "?? Cache Diagnostics:"
          echo "Cache dependency path: ${CACHE_DEPENDENCY_PATH:-unset}"
          if [ -n "${CACHE_DEPENDENCY_PATH:-}" ]; then
            echo "Cache files count: $(echo "${CACHE_DEPENDENCY_PATH}" | wc -l)"
            echo "Cache files:"
            echo "${CACHE_DEPENDENCY_PATH}"
          fi

      - name: Planning Engine Jest Diagnostics
        run: |
          set -euo pipefail
          echo "?? Planning Engine Jest Configuration:"
          npx jest --config services/planning-engine/jest.config.cjs --showConfig | head -n 50
          echo "?? Planning Engine Test List:"
          npx jest --config services/planning-engine/jest.config.cjs --listTests --runInBand

      - name: Ensure test-results dir (pre-tests)
        run: mkdir -p test-results
      - name: Run Services Tests (Known Good Path)
        env:
          JEST_JUNIT_OUTPUT: test-results/junit-services.xml
        run: |
          set -euo pipefail
          echo "?? Running services tests with known good configuration..."
          npm run test:services -- --reporters=default --reporters=jest-junit

      - name: Run Frontend Tests (Known Good Path)
        env:
          JEST_JUNIT_OUTPUT: test-results/junit-frontend.xml
        run: |
          set -euo pipefail
          echo "?? Running frontend tests with known good configuration..."
          npm run test:frontend -- --reporters=default --reporters=jest-junit

      - name: Stop Frontend Service
        if: always()
        run: |
          set -euo pipefail
          echo "?? Stopping frontend service..."
          if [ -n "${FRONTEND_PID:-}" ]; then
            kill "${FRONTEND_PID}" 2>/dev/null || true
          fi
          # Kill any remaining node processes on port 3000
          lsof -ti:3000 | xargs kill -9 2>/dev/null || true

      - name: Ensure test results directory exists
        if: always()
        run: |
          set -euo pipefail
          mkdir -p test-results
          echo "Test results directory created/verified"

      - name: Determine if test artifacts exist
        id: results_meta
        if: always()
        run: |
          set -euo pipefail
          files="$( (ls -1 test-results 2>/dev/null || true) | wc -l )"
          cov="$( (find coverage -type f 2>/dev/null || true) | wc -l )"
          j=0; [ -f junit.xml ] && j=1 || j=0
          if [ "$files" -gt 0 ] || [ "$cov" -gt 0 ] || [ "$j" -gt 0 ]; then
            echo "has_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_files=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          if-no-files-found: ignore
          path: |
            test-results/**
            coverage/**
            junit.xml

  # ????
  contracts:
    name: Contract Validation
    runs-on: ubuntu-latest
    needs: [sanity, quality]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/**/package-lock.json
            packages/**/package-lock.json
            services/**/package-lock.json

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Validate OpenAPI contracts
        run: |
          # ?? OpenAPI ??
          if [ -f packages/contracts/openapi.yaml ]; then
            echo "Validating OpenAPI contract..."
            # ??Node.js YAML???????
            node -e "
              const fs = require('fs');
              const yaml = require('js-yaml');
              try {
                const content = fs.readFileSync('packages/contracts/openapi.yaml', 'utf8');
                yaml.load(content);
                console.log('? OpenAPI YAML syntax is valid');
              } catch (e) {
                console.error('? OpenAPI YAML syntax error:', e.message);
                process.exit(1);
              }
            " || echo "OpenAPI validation failed"
          else
            echo "OpenAPI file not found, skipping validation"
          fi
          
          # ?? Proto ????
          if command -v protoc &> /dev/null; then
            if [ -d packages/contracts/proto ]; then
              echo "Validating Proto files..."
              protoc --proto_path=packages/contracts/proto --js_out=import_style=commonjs,binary:. packages/contracts/proto/*.proto
              echo "? Proto files validation completed"
            else
              echo "Proto directory not found, skipping validation"
            fi
          else
            echo "protoc not available, skipping proto validation"
          fi

  # ???? - ???????
  build:
    name: Build Check (Blocking)
    runs-on: ubuntu-latest
    needs: [quality, test, contracts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/**/package-lock.json
            packages/**/package-lock.json
            services/**/package-lock.json

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Generate Prisma clients (all services)
        run: |
          set -euo pipefail
          chmod +x "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh"
          for schema in $(git ls-files 'services/**/prisma/schema.prisma'); do
            service_dir=$(dirname "$(dirname "$schema")")
            "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh" "$service_dir"
          done
        env:
          PRISMA_ENGINES_MIRROR: ${{ secrets.PRISMA_ENGINES_MIRROR }}

      - name: Verify Prisma clients (per service)
        run: |
          set -euo pipefail
          echo "?? Verifying per-service Prisma clients..."
          missing=0
          for svc in services/*; do
            if [ -f "$svc/prisma/schema.prisma" ]; then
              echo "? $svc expects $svc/prisma/generated/client/index.js"
              if [ -f "$svc/prisma/generated/client/index.js" ]; then
                echo "  ? found"
              else
                echo "  ? missing $svc/prisma/generated/client"
                ls -la "$svc/prisma" || true
                missing=1
              fi
            fi
          done
          [ "$missing" -eq 0 ] || { echo "? Prisma client missing"; exit 1; }

      - name: Validate production configuration
        run: |
          echo "?? ????????..."
          export NODE_ENV=production
          echo "? ??????????"

      - name: Build all packages (Mandatory)
        run: |
          echo "?? ?????????..."
          npx turbo run build
          echo "? ????????"

  # ???? - ????? (??orchestrator)
  test-mandatory:
    name: Test Check (Non-Blocking)
    runs-on: ubuntu-latest
    needs: [quality, contracts]
    outputs:
      has_artifacts: ${{ steps.results_meta.outputs.has_files }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/**/package-lock.json
            packages/**/package-lock.json
            services/**/package-lock.json

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Generate Prisma clients
        run: |
          set -euo pipefail
          chmod +x "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh"
          for schema in $(git ls-files 'services/**/prisma/schema.prisma'); do
            service_dir=$(dirname "$(dirname "$schema")")
            "$GITHUB_WORKSPACE/scripts/ci/prisma-generate.sh" "$service_dir"
          done
        env:
          PRISMA_ENGINES_MIRROR: ${{ secrets.PRISMA_ENGINES_MIRROR }}
      - name: Ensure test-results dir (pre-tests)
        run: mkdir -p test-results

      - name: Run tests via Jest orchestrator (non-blocking)
        env:
          JEST_JUNIT_OUTPUT: test-results/junit-mandatory.xml
        run: |
          set -euo pipefail
          echo "?? Running tests via Jest orchestrator (non-blocking)..."
          echo "Node version: $(node -v)"
          echo "Jest version: $(npx jest --version)"
          # Use orchestrator config with controlled concurrency
          JEST_MAX_WORKERS=1 npx jest --config jest/jest.projects.cjs --runInBand --passWithNoTests --reporters=default --reporters=jest-junit
          echo "? Orchestrator tests completed!"

      - name: Ensure test results directory exists
        if: always()
        run: |
          set -euo pipefail
          mkdir -p test-results
          echo "Test results directory created/verified"

      - name: Determine if test artifacts exist
        id: results_meta
        if: always()
        run: |
          set -euo pipefail
          files="$( (ls -1 test-results 2>/dev/null || true) | wc -l )"
          cov="$( (find coverage -type f 2>/dev/null || true) | wc -l )"
          j=0; [ -f junit.xml ] && j=1 || j=0
          if [ "$files" -gt 0 ] || [ "$cov" -gt 0 ] || [ "$j" -gt 0 ]; then
            echo "has_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_files=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-mandatory
          if-no-files-found: ignore
          path: |
            test-results/**
            coverage/**
            junit.xml

  # ?????? (?PR)
  preview:
    name: Preview Environment
    runs-on: ubuntu-latest
    needs: [build, test-mandatory]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # Tag for PRs: ghcr.io/?:pr-<number>
            type=ref,event=pr
            # Short SHA tag with a safe prefix: ghcr.io/?:sha-<7>
            type=sha,format=short,prefix=sha-
            # Latest tag only on main
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Validate Dockerfile formatting
        run: |
          echo "Dockerfile lines: $(wc -l < Dockerfile)"
          head -n 20 Dockerfile || true
          echo "Hex (first 160 bytes):"
          hexdump -C Dockerfile | head -n 10 || true

      - name: Dry build (no push)
        run: |
          docker build --progress=plain -f Dockerfile .
      - name: Build and push preview images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: false

      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '?? **Preview Environment Ready!**\n\n' +
                    'Your changes have been built and are ready for testing.\n\n' +
                    '**Docker Images:**\n' +
                    '- Main Image: `ghcr.io/${{ github.repository }}:pr-${{ github.event.number }}`\n' +
                    '- SHA Tag: `ghcr.io/${{ github.repository }}:sha-${{ github.sha }}`\n\n' +
                    '**Next Steps:**\n' +
                    '1. Deploy to preview environment\n' +
                    '2. Run integration tests\n' +
                    '3. Manual testing by team members'
            })

  # ????
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [sanity, quality]
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/**/package-lock.json
            packages/**/package-lock.json
            services/**/package-lock.json

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency check
        run: npx audit-ci --config audit-ci.json || true

      # Snyk???? - ???????
      - name: Install Snyk CLI
        if: ${{ env.SNYK_TOKEN != '' }}
        run: npm i -g snyk@latest
        continue-on-error: true

      - name: Snyk test
        if: ${{ env.SNYK_TOKEN != '' }}
        run: snyk test --severity-threshold=high --exclude=dist,.turbo,coverage,.next,prisma/generated
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        continue-on-error: true

      - name: Check for high-risk dependencies
        run: |
          echo "?? Checking for high-risk dependencies..."
          npm audit --audit-level=high --json > audit-results.json || true
          
          # ?????????
          if [ -f audit-results.json ]; then
            HIGH_RISK=$(node -e "
              const fs = require('fs');
              const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              const vulnerabilities = audit.vulnerabilities || {};
              const highRisk = Object.values(vulnerabilities).filter(v => v.severity === 'high' || v.severity === 'critical');
              console.log(highRisk.length);
            ")
            
            if [ "$HIGH_RISK" -gt 0 ]; then
              echo "? Found $HIGH_RISK high-risk vulnerabilities!"
              echo "Please review and update dependencies before merging."
              exit 1
            else
              echo "? No high-risk vulnerabilities found"
            fi
          fi

  # ???? (??)
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build, test-mandatory]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance-test')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/**/package-lock.json
            packages/**/package-lock.json
            services/**/package-lock.json

      - name: Enable Corepack and Enforce Package Manager Version
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Run performance tests
        run: npx turbo run test:performance --filter="...[origin/main]" || echo "No performance tests found"

  # ??????
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test, test-mandatory]
    if: always() && (needs.test.result == 'success' || needs.test-mandatory.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/**/package-lock.json
            packages/**/package-lock.json
            services/**/package-lock.json

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Download test artifacts
        if: ${{ needs.test.outputs.has_artifacts == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results/
        continue-on-error: true

      - name: Download test artifacts (mandatory)
        if: ${{ needs.test-mandatory.outputs.has_artifacts == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: test-results-mandatory
          path: test-results-mandatory/
        continue-on-error: true

      - name: Generate test report
        run: node ./scripts/generate-test-report.js
        working-directory: ${{ github.workspace }}

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-results/report.html

  # ????
  e2e-pw:
    name: E2E (Playwright, chromium)
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: sanity
    steps:
      - name: Checkout (selected ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Build frontend
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright (chromium)
        run: npx playwright test --project=chromium --reporter=dot
        env:
          BASE_URL: http://localhost:3000

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report
  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [quality, test, contracts, build, test-mandatory, security, test-report]
    if: needs.quality.result == 'success' && needs.test.result == 'success' && needs.contracts.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
    steps:
      - name: Pipeline Status
        run: |
          echo "? All checks passed! Pipeline successful."
          echo "Quality: ${{ needs.quality.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Contracts: ${{ needs.contracts.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test Mandatory: ${{ needs.test-mandatory.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test Report: ${{ needs.test-report.result }}"

  frontend-smoke:
    name: Frontend Smoke (jsdom)
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: sanity
    steps:
      - name: Checkout (selected ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}

      - name: Install dependencies (npm ci)
        run: npm ci --no-audit --no-fund
      - name: Print Jest version
        run: npx jest --version

      - name: Run single frontend spec (jsdom)
        run: |
          npx jest apps/frontend/src/__tests__/components/PlanCard.test.tsx \
            --runInBand --verbose --detectOpenHandles --forceExit | tee frontend-smoke-log.txt

      - name: Upload smoke log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-smoke-log-${{ github.run_id }}
          path: frontend-smoke-log.txt

  # Health endpoints smoke test (non-blocking)
  health-smoke:
    name: Health Endpoints Smoke Test
    runs-on: ubuntu-latest
    needs: sanity
    continue-on-error: true
    steps:
      - name: Checkout (selected ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path }}

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Build packages
        run: |
          npm run build -w packages/otel-preset
          npm run build -w packages/health-schema

      - name: Run health smoke test
        run: npm run test:health
        env:
          TELEMETRY_ENABLED: false
          NODE_ENV: test
          GITHUB_SHA: ${{ github.sha }}
          BUILD_ID: CI-${{ github.run_id }}

      - name: Upload health test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-smoke-results-${{ github.run_id }}
          path: |
            health-smoke-log.txt
            health-test-results.json

  docs-schemas:
    name: Docs Schemas Validation
    runs-on: ubuntu-latest
    needs: sanity
    continue-on-error: true
    steps:
      - name: Checkout (selected ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Validate normalized examples against JSON Schemas
        run: npm run validate:schemas

