name: Integration Tests

on:
  pull_request:
    paths:
      - 'services/**/*.ts'
      - 'packages/**/*.ts'
  push:
    branches: [main]
    paths:
      - 'services/**/*.ts'
      - 'packages/**/*.ts'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sanity:
    uses: ./.github/workflows/_sanity-reuse.yml

  integration-tests:
    name: Integration Tests (Non-Blocking)
    runs-on: ubuntu-latest
    needs: [sanity]
    continue-on-error: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_planning
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'
          cache-dependency-path: ${{ needs.sanity.outputs.cache-dependency-path || 'package-lock.json' }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies


        run: npm ci --no-audit --no-fund
      - name: Generate Prisma clients
        run: ./scripts/generate-prisma-clients.sh

      - name: Setup test database
        run: |
          set -euo pipefail
          echo "ðŸ”§ Setting up test database..."
          cd services/planning-engine
          export PLANNING_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_planning"
          export REDIS_URL="redis://localhost:6379"
          export NODE_ENV="test"
          
          # Run migrations
          npx prisma migrate deploy
          
          # Seed database if needed
          if [ -f "prisma/seed.ts" ]; then
            npx prisma db seed
          fi
          
          echo "âœ… Test database setup complete"

      - name: Run integration tests
        run: |
          set -euo pipefail
          echo "ðŸ§ª Running integration tests..."
          cd services/planning-engine
          
          # Set test environment variables
          export PLANNING_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_planning"
          export REDIS_URL="redis://localhost:6379"
          export NODE_ENV="test"
          
          # Run integration tests with real database
          npx jest --config jest.config.cjs \
            --testPathPattern="(message-reliability|reliability|integration)" \
            --runInBand \
            --verbose \
            --detectOpenHandles \
            --forceExit

      - name: Upload integration test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs-${{ github.run_id }}
          if-no-files-found: ignore
          path: |
            services/planning-engine/test-results/
            services/planning-engine/logs/
          retention-days: 7

      - name: Cleanup test database
        if: always()
        run: |
          set -euo pipefail
          echo "ðŸ§¹ Cleaning up test database..."
          cd services/planning-engine
          export PLANNING_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_planning"
          
          # Drop test database
          npx prisma migrate reset --force || true
          
          echo "âœ… Test database cleanup complete"
